{
  "stats": {
    "suites": 158,
    "tests": 598,
    "passes": 598,
    "pending": 0,
    "failures": 0,
    "start": "2018-12-13T06:48:33.304Z",
    "end": "2018-12-13T07:07:33.978Z",
    "duration": 1140674,
    "testsRegistered": 598,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "1c9ef6aa-2ff0-42b6-847e-e007b0c216fb",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "bbd698fa-f367-4507-b405-306d6ef07906",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a44bb78b-cb11-443a-bddd-be33f12f0928",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2e35f564-9800-475f-9343-6732415b070e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6f86f5c1-e4c6-40fa-8f75-84fdc46bc733",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "06475690-568d-43a9-bdee-72d04608cddf",
        "title": "EternalStorageProxyMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "EternalStorageProxyMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "5b5d653f-2f52-42cd-ba79-01240a852743",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "EternalStorageProxyMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7c978131-9c0c-47ed-9c11-43a43ff12fb7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "EternalStorageProxyMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "64129a3b-3ca1-4283-8d2c-b8da82dd6f83",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9ff068ae-62a9-4796-870a-33c9d2227500",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "c1d72a41-2f6d-446b-adfc-08e145d645d6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5bee221e-3a5a-44c2-a31f-aeba6a2da2c4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "21ae0e7d-160c-43cf-8476-3192588c30ac",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6beaaa4b-6ab1-4969-8a14-1d6c651ea438",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "800a709b-9017-4441-9448-e07193c7d44e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eb51eb6d-0dc8-4821-8908-9be15174f8b2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ad93cc06-befc-43a4-858f-469c5d7418dd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e6e40009-5c9e-4482-a5b4-36635c21b4e1",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "ecd9fe1d-bbf0-4d21-8350-5112359db5f0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "42ae00a9-2b94-41ed-ab39-9d50a1be4c60",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9c0ca037-126a-43c5-833c-e83b5e6ec9c5",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8398d2df-e3ee-4ae4-818d-1698a5eafd06",
        "title": "RewardByBlockMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "48c59d71-1e6c-4ef4-a492-5cb0bfaa7a7a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "477cbe49-d225-4c40-aec2-8740f218e5c4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e0e957e4-1e91-4b96-909f-fadd870587f7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c3d69a7d-1f9c-4845-805c-53fdc1970d04",
        "title": "RewardByTimeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "d222d333-b075-48c8-a7ce-77ce28a07cac",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "112ca12e-d358-474a-9055-4f4cb8efad9e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3fb5cee5-6d87-48ca-8095-82785d990e9a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "19a9ee52-80db-4a5a-a321-c45681e5dfd0",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "1fd64426-bcd0-457b-8944-16fa1a18868e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dd42cfa9-8e8a-4c1b-acb4-b2dea35f6a26",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8d33e558-887a-4b6c-a9b7-f0cc9c3a008f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "cbb8c8aa-7b20-4d04-9ffe-30e9eba3a7c4",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "b05c3c33-9c55-4795-afa5-1e1503acbaa9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6e170fa6-ee67-4e50-98b5-128e0a3e7043",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "80873834-84f6-4c1b-985a-214a88f6e2ad",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "13ca0c75-47f8-4fb2-ba5c-0054dcac3afe",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "15d6d6db-1bee-4a90-b51c-960e21e239a0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a2fea602-505a-4fe8-a924-70e9d36270d9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "01840769-caad-4484-ba78-46cbd4d7d23e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "720b7300-4783-4fb6-ad90-e26b6530d458",
        "title": "VotingToChangeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "4efa455c-878a-4e32-81fc-1273fb8f712a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "29b82421-db96-4633-9acc-21f77dcd2f24",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "866407ae-32f7-4849-800f-4257b5afb996",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8e17643f-1ee4-4ba6-9ff1-4c6a21a8361e",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "fb58dfed-6b64-4450-89f7-c0a30832e888",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "053139e0-b957-46cd-b92a-e23045bf2d43",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "55cd3470-e348-42e6-b8f8-90df2b5a9925",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "afc96286-ccf2-4a46-9e98-6aadb374ec3f",
        "title": "VotingToManageEmissionFundsMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "05f9d516-d53b-4f11-be46-4017cbad03a1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "33c1356e-1789-4358-8a79-9470a1da5ba1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ccb9f153-3919-4cb9-a535-1496564b3c43",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b0cf292f-6a02-439d-b8a5-c14e7dc043d4",
        "title": "BallotsStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "1050fb6e-f1a9-42e6-a1af-6264b1cb4292",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f68b9204-8d22-4c57-96d2-83fd0875507f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3e664f0d-47da-46a1-aba5-ac92650393c3",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d6f9d6b0-1429-4021-a1cf-c9e9070386be",
        "title": "KeysManagerNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "0056f7f6-2955-4eee-9db7-d342762769a9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7ee10bb4-4979-4521-9812-e6b8ddf30222",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a0d499e1-75c0-4927-9ad7-6458799b3cd1",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1313948c-80d7-4381-a220-e6a62dcb4a8c",
        "title": "ProxyStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "e7925cb8-c113-4637-8efd-f1804f324094",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4b2cbc33-5d0c-4573-b25c-dbdbdadcf066",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "87fb8d10-ba6d-46c2-8f17-4875a31a8166",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3806dd47-4dc6-4f48-9c09-3062940a59c3",
        "title": "RewardByBlockNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a79cdbd1-21fb-4384-b717-f77d158e8b71",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dfbf517b-92bc-4d8a-aeb6-bf82490a84c6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3f5304ac-198b-4017-b50c-085ccff8dcbc",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f388d96e-b230-49fb-89e8-2062f7a910af",
        "title": "RewardByTimeNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "bf6ec5a8-0e27-40ab-86a6-7f9acba61f50",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "69c78415-ab35-4349-893f-752611f39fbc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5a0fe2d0-362b-4e2a-8d55-c8937406c4dd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a59c277c-b8a0-4bc3-a549-53ee6fb79ba3",
        "title": "ValidatorMetadataNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "08349c9d-62d5-44ce-8a6f-f861f0788acb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "599e42c5-7b47-4320-b6a9-801ac2767380",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a5764512-858a-4f65-8440-88568f4d3f38",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "24d04acf-dc0f-47fc-8332-425e6a1a6ec9",
        "title": "VotingToChangeKeysNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "4233adad-e057-443c-a56a-470937e5930f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4f86c496-cdcf-4dde-8cb4-6f68a156fe70",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0841c750-01de-421f-bfde-b0697ce2503a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1fbe8719-753b-48ff-b3bf-7ae5ff31b594",
        "title": "VotingToChangeMinThresholdNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "0b93b098-67b6-47b0-bd38-398d246625f6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "15e91518-c9d8-4f50-b5cb-5cb1f0d4356b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "979f190c-3e0e-4f76-bcd6-9a63a6fcd33f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f8a3096c-6341-445b-ad97-ce3315846b94",
        "title": "VotingToChangeProxyAddressNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2cf3d41e-f73c-4733-a362-2ab541389bca",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8a86f75f-2150-49ec-8705-23c81eef1584",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "135f460e-2cf6-4aab-be16-a20aa1e53893",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "40463e0c-a6e1-40c5-b195-f4b32a96b131",
        "title": "VotingToManageEmissionFundsNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a5627007-f4ce-4cfe-a9b1-cb957471aaf2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5b42e316-7ea6-4d20-b4c5-f5d0d7ccdaea",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e2268ddd-0675-48fc-b3bc-952c5ece2d20",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "14a66f29-6f1f-4471-ba78-a1c1ac338738",
        "title": "VotingKey",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingKey \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "888ebf5a-1ce9-498b-88f6-f22972cfa078",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingKey \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "060ddfc7-181f-4e95-bd93-5a37bfbe9041",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingKey \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "95932bfa-f1fe-47bf-baca-f9cd64df4672",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0eb56e93-12e4-4fdd-9f66-d2f07bc119b1",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 435,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3dfc5543-4930-4b75-945e-a499c13f58ee",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ddc1f4e5-4c47-40cd-b745-38eda8c95405",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 606,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);",
            "err": {},
            "isRoot": false,
            "uuid": "c9954df8-e34b-464e-a530-929485019180",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8d8a3a67-2298-4ab5-bc59-ef6f2b165629",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "1dfbdff0-5a90-4ad8-911d-eaa181189613",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a9c853ac-41d2-4c34-afbc-08ba844efe73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "f7d18b79-e406-4ce1-8548-82e94ee3af1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a9c853ac-41d2-4c34-afbc-08ba844efe73",
              "f7d18b79-e406-4ce1-8548-82e94ee3af1e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 60,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "88dd66be-5811-497c-9f0f-a791b07dffe5",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 300,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bfcd0368-51f8-4fb7-b692-43a936ca7ad7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bfcd0368-51f8-4fb7-b692-43a936ca7ad7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 300,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f869ad3e-c199-483e-a17a-ffd5a884fdac",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "4928e293-59ff-4292-9ffc-0cdcece89b3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "216654ef-a48b-41ae-b682-9ee4aa95c0bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "546bacd3-d5c2-4cd4-9975-22ee928e5752",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "8f39aee6-0e40-4a43-bd19-ff5cfe30c541",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "1f22e49c-f4ad-435f-a51b-58ce64de5cf8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4928e293-59ff-4292-9ffc-0cdcece89b3d",
              "216654ef-a48b-41ae-b682-9ee4aa95c0bb",
              "546bacd3-d5c2-4cd4-9975-22ee928e5752",
              "8f39aee6-0e40-4a43-bd19-ff5cfe30c541",
              "1f22e49c-f4ad-435f-a51b-58ce64de5cf8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 571,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "52f7a9b7-abba-4d59-8ef1-c397f49fb9d4",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 399,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "36e9aaab-023a-46b8-8190-33c8893114df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1493,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "5960084a-dc15-42d9-ac5a-149c8ec841f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36e9aaab-023a-46b8-8190-33c8893114df",
              "5960084a-dc15-42d9-ac5a-149c8ec841f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1892,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a507b35f-dd3e-4f84-98d4-e70d9db5be89",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "dcf23500-ba12-411a-bed6-ac9072107d4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dcf23500-ba12-411a-bed6-ac9072107d4a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "113cb579-b708-4f43-a579-88a81c71a37c",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "85a7b576-7d35-4dc8-a38d-331418c16d11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 1130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "50a91b2a-7406-418d-ad23-67ca078c22e0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85a7b576-7d35-4dc8-a38d-331418c16d11",
              "50a91b2a-7406-418d-ad23-67ca078c22e0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1404,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fcc12c41-75f1-4cac-ae09-c54669aa782f",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 83,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nballotsStorage = await BallotsStorage.new();\nballotsStorageOldImplementation = ballotsStorage.address;\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "73c6f8ca-b2d1-4040-b46a-f9fa9974bc1d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "1b3f1209-5076-4125-80f8-b63b9d8968da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst newImplementation = ballotsStorageNew.address;\n(await ballotsEternalStorage.implementation.call()).should.be.equal(ballotsStorageOldImplementation);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "3ecec51d-5ed2-4e88-92cc-7cb4eb569ead",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst oldVersion = await ballotsEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "22d8eb8f-ad23-4383-a1c1-9daa296f9b82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.initialized.call()).should.be.equal(false);\nawait ballotsStorageNew.initialize();\n(await ballotsStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "40a5b152-9155-4ec0-a9b9-69fe46d2bb58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "76c60829-74de-4ff2-82ab-7ad35fed38b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(6, 1, true, {from: votingToChangeMinThreshold});\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\nconst threshold = await ballotsStorageNew.getBallotThreshold.call(1);\nthreshold.should.be.bignumber.equal(6);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "43a2068d-9204-4d78-859c-45a56b5e1c87",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1b3f1209-5076-4125-80f8-b63b9d8968da",
              "3ecec51d-5ed2-4e88-92cc-7cb4eb569ead",
              "22d8eb8f-ad23-4383-a1c1-9daa296f9b82",
              "40a5b152-9155-4ec0-a9b9-69fe46d2bb58",
              "76c60829-74de-4ff2-82ab-7ad35fed38b0",
              "43a2068d-9204-4d78-859c-45a56b5e1c87"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 823,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1b7b977b-c863-41bd-9355-265641416ece",
        "title": "Contract: BallotsStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
        "file": "/test/ballots_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1339,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "bfa47767-b7b7-4125-9460-3ff12b3c79bf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f41f78eb-e7b5-4ee4-8274-cfa043e08cb6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 838,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorage = await BallotsStorageNew.at(ballotsEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "14a2504c-da2e-4379-ab58-7f53c8016d28",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e52ba092-ea3b-49eb-ae16-5c56b24b496c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "61a0e699-dcd7-46ac-bc5b-e39745be2120",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "84faa28a-ddc0-45ee-b3f5-40c8fdcbcc47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "4175546f-e620-4b81-8c36-5d05f327205f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84faa28a-ddc0-45ee-b3f5-40c8fdcbcc47",
              "4175546f-e620-4b81-8c36-5d05f327205f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 55,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "12018507-3812-4d0f-a0da-0a9769c5ad5b",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f85fb416-4727-4e13-a58b-1c483724710d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f85fb416-4727-4e13-a58b-1c483724710d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 249,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e86fbc4e-f6e6-4348-ad2b-f3d3b51f9bdc",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "a3584f5a-98ab-4458-a823-a1c932e0d400",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "70d5f531-4217-46e8-9d5d-e975dbb45dbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "8f905ac9-6049-4621-bc37-4627ee909572",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "4f6a6d09-fe4d-47ce-bc81-465eb1053646",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "9438e59d-f3ce-434c-b42f-ec87db899829",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a3584f5a-98ab-4458-a823-a1c932e0d400",
              "70d5f531-4217-46e8-9d5d-e975dbb45dbc",
              "8f905ac9-6049-4621-bc37-4627ee909572",
              "4f6a6d09-fe4d-47ce-bc81-465eb1053646",
              "9438e59d-f3ce-434c-b42f-ec87db899829"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 488,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "31bd02dd-7541-40ea-8267-eac09dafc96a",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "5cc0562e-32da-4820-974d-253e954adff7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1365,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "0b411ba5-3c3f-4e4c-b1d9-d72172730d10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5cc0562e-32da-4820-974d-253e954adff7",
              "0b411ba5-3c3f-4e4c-b1d9-d72172730d10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1742,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5c4df808-f3d7-43ae-8a30-6233020eda6b",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "2cb0fcc9-a64a-4eca-84e3-9a6ea8249856",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2cb0fcc9-a64a-4eca-84e3-9a6ea8249856"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5f2c5e9d-cff1-4c54-92c8-331654584d7a",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "3f013a5a-8901-4767-ae4f-f84818c33fa1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 1068,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "e6dcac89-aa17-4b83-a447-50d8cbc98830",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f013a5a-8901-4767-ae4f-f84818c33fa1",
              "e6dcac89-aa17-4b83-a447-50d8cbc98830"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1344,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "915caabb-d392-4f6e-9e6b-b414f20b14d4",
        "title": "Contract: EmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
        "file": "/test/emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1083,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "d024c3f2-52d6-4537-8370-351189f8c92e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 12,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ff574039-d586-4bff-8401-e19e24de275e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 361,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "amount = web3.toWei(10, 'ether');\nvotingToManageEmissionFunds = accounts[0];\nawait EmissionFunds.new(0).should.be.rejectedWith(ERROR_MSG);\n\nemissionFunds = await EmissionFunds.new(\n  votingToManageEmissionFunds\n).should.be.fulfilled;\n\nawait web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);",
            "err": {},
            "isRoot": false,
            "uuid": "1e48edb2-862d-4a77-bb4d-c08b4c02b69b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7e57413f-6510-4f04-a758-91d31a5a00b8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "796b310b-6238-4eac-819b-290f3967ecfb",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should save VotingToManageEmissionFunds address",
                "fullTitle": "Contract: EmissionFunds [all features] constructor should save VotingToManageEmissionFunds address",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await emissionFunds.votingToManageEmissionFunds.call()).should.be.equal(\n  votingToManageEmissionFunds\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d510c0a8-3717-4f73-a205-9461b8bff33d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d510c0a8-3717-4f73-a205-9461b8bff33d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c6c5b332-035c-4afd-bf4c-c54baa1e3b32",
            "title": "#fallback",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should receive funds",
                "fullTitle": "Contract: EmissionFunds [all features] #fallback should receive funds",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amount * 2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "11dcff51-6280-42b8-9797-21c29fb346da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11dcff51-6280-42b8-9797-21c29fb346da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 318,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "211b258a-bf06-4922-bdac-6182ca694eb2",
            "title": "#sendFundsTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo \"before each\" hook",
                "timedOut": false,
                "duration": 154,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[2];\nreceiverInitBalance = await web3.eth.getBalance(receiver);",
                "err": {},
                "isRoot": false,
                "uuid": "7a4c673e-bf7c-485b-92ba-e16d5fd33797",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8b033171-5044-4609-b3a2-0339bcb45505",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send funds to receiver",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send funds to receiver",
                "timedOut": false,
                "duration": 347,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amountToSend)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "e24f7cde-718e-4857-a57d-38cde117c3aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send entire amount",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amount)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "1c6a3a55-f8fb-4058-8b23-94c16ceaa648",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount greater than balance",
                "timedOut": false,
                "duration": 336,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = amount + 1;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "cbd46814-cf7d-4a26-8c41-eb129193e3fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount is too much",
                "timedOut": false,
                "duration": 322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "c7831e48-1ee0-453e-a3c2-6036b5b1af3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if receiver is 0x0",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if receiver is 0x0",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  '0x0000000000000000000000000000000000000000',\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namountRemain.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal('0x0000000000000000000000000000000000000000');\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "f5b71994-2a43-4a72-b6b3-66cc703096cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 326,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = 0;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9f7f98c2-d508-4aa7-842c-e396dfd43e8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail if receiver address is not full",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should fail if receiver address is not full",
                "timedOut": false,
                "duration": 682,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const signature = web3.sha3('sendFundsTo(address,uint256)').slice(0, 10);\nlet data = signature;\ndata += '0000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nlet receipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(0);\ndata = signature;\ndata += '000000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nreceipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "dc40db4c-c477-4ef4-997b-d82d298d3937",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b033171-5044-4609-b3a2-0339bcb45505",
              "e24f7cde-718e-4857-a57d-38cde117c3aa",
              "1c6a3a55-f8fb-4058-8b23-94c16ceaa648",
              "cbd46814-cf7d-4a26-8c41-eb129193e3fe",
              "c7831e48-1ee0-453e-a3c2-6036b5b1af3c",
              "f5b71994-2a43-4a72-b6b3-66cc703096cc",
              "9f7f98c2-d508-4aa7-842c-e396dfd43e8a",
              "dc40db4c-c477-4ef4-997b-d82d298d3937"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2545,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7a901bb0-fee8-4a1d-adba-70965a49b126",
            "title": "#burnFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(5, 'ether');\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fb86c90a-6a47-4652-9ab0-e31040eedeb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn funds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn funds",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToBurn;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "0745ae14-a9a5-4af3-b9ee-d4fcefc1bd26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn entire amount",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.burnFunds(\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "b0134cf0-4d58-43eb-b42f-61104e6100b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount greater than balance",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = amount + 1;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "07f1954f-e0da-4199-8b87-3b5d6f12b72e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount is too much",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "0ba75b3e-e682-46aa-baf3-26587ee5c515",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = 0;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9f7ab57f-1e50-4853-b2cf-d6bd25c3ddbe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb86c90a-6a47-4652-9ab0-e31040eedeb1",
              "0745ae14-a9a5-4af3-b9ee-d4fcefc1bd26",
              "b0134cf0-4d58-43eb-b42f-61104e6100b0",
              "07f1954f-e0da-4199-8b87-3b5d6f12b72e",
              "0ba75b3e-e682-46aa-baf3-26587ee5c515",
              "9f7ab57f-1e50-4853-b2cf-d6bd25c3ddbe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 878,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "082c0a88-a131-423b-b898-82752cb36b0e",
            "title": "#freezeFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(5, 'ether');\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "183a7408-e196-426f-ac27-667b089f48db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should freeze funds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should freeze funds",
                "timedOut": false,
                "duration": 163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(4, 'ether');\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToFreeze);",
                "err": {},
                "isRoot": false,
                "uuid": "875d3001-290f-4826-a463-c0e1b9b6954b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = 0;\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "273c5a57-29be-41d4-b784-1094ac27eee2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "183a7408-e196-426f-ac27-667b089f48db",
              "875d3001-290f-4826-a463-c0e1b9b6954b",
              "273c5a57-29be-41d4-b784-1094ac27eee2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 373,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b744605c-e4b1-4f0d-af7e-ebca0235b89e",
        "title": "Contract: EternalStorageProxy [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
        "file": "/test/eternal_storage_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 381,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "c80428ce-2c0f-4e49-94fd-0f4fcc854dfe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9e474cbd-0874-4740-a99b-1a94efb39e5e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ca1f43b0-984a-4445-b056-c3212f4f5d58",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "97d873a6-902d-48d2-b0d3-83cd19b50fa4",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should revert if implementation address is equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should revert if implementation address is equal to 0x0",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await EternalStorageProxy.new(\n  accounts[1],\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5d37bba0-bf92-43bb-9cc3-eeb1cc4a85c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow ProxyStorage address equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should allow ProxyStorage address equal to 0x0",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  '0x0000000000000000000000000000000000000000',\n  accounts[1]\n).should.be.fulfilled;\ninstance.address.should.be.equal(\n  await instance.getProxyStorage.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fadddd36-f5e3-4428-bc5a-3a394bc11094",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set ProxyStorage address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set ProxyStorage address",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getProxyStorage.call()).should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "3a4268b0-1197-458d-a051-1f9542a3842a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set implementation address",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "9f486f8e-341c-47fc-bc7e-38b48b6ba563",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set owner",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "8f8009d2-0e99-4dc1-bebd-e908cd9c42d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5d37bba0-bf92-43bb-9cc3-eeb1cc4a85c7",
              "fadddd36-f5e3-4428-bc5a-3a394bc11094",
              "3a4268b0-1197-458d-a051-1f9542a3842a",
              "9f486f8e-341c-47fc-bc7e-38b48b6ba563",
              "8f8009d2-0e99-4dc1-bebd-e908cd9c42d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 233,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "70e2780d-199d-4794-ae9a-72c895c6212f",
            "title": "#renounceOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 37,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "937a44e3-a6d5-4ba2-be2a-b7fdf849134f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.renounceOwnership({from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait instance.renounceOwnership().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "122d8afe-2af0-41a3-97bb-54d73cda8fec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership should set owner to 0x0",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.renounceOwnership().should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlogs[0].event.should.be.equal(\"OwnershipRenounced\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "ad8a2215-56c6-49f8-a132-1531ab32b609",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "122d8afe-2af0-41a3-97bb-54d73cda8fec",
              "ad8a2215-56c6-49f8-a132-1531ab32b609"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "594a0df0-50cd-4e85-8638-f8eaa9de9b99",
            "title": "#transferOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 52,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "36ce1788-a705-49c2-ab7d-c8916809055c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  accounts[3],\n  {from: accounts[4]}\n).should.be.rejectedWith(ERROR_MSG);\nawait instance.transferOwnership(accounts[3]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6f0ea901-a433-4dad-b66d-ae34b7374a81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should change owner",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.transferOwnership(accounts[3]).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"OwnershipTransferred\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);\nlogs[0].args.newOwner.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "f596b9af-f702-42df-b144-571d73a46e03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change owner if its address is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should not change owner if its address is 0x0",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5676e8e5-e882-42ea-ae50-5bb2f9a0d51b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6f0ea901-a433-4dad-b66d-ae34b7374a81",
              "f596b9af-f702-42df-b144-571d73a46e03",
              "5676e8e5-e882-42ea-ae50-5bb2f9a0d51b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 106,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "330fe407-ab54-474d-88aa-de445f4f06e6",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 31,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5956cac4-6845-4a2d-ba56-bd02b0390a07",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.upgradeTo(accounts[3]).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await instance.upgradeTo(accounts[3], {from: accounts[1]});\nlogs[0].event.should.be.equal(\"Upgraded\");",
                "err": {},
                "isRoot": false,
                "uuid": "ab143697-878d-4efe-9f3a-f2a5c344270e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is the same",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is the same",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  accounts[2],\n  {from: accounts[1]}\n).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "1d5c2d76-4771-40ae-8f4d-d685b89e26fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is 0x0",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "a773aa1f-9c79-4514-b96b-f5bff0443fe1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"Upgraded\");\nlogs[0].args.version.should.be.bignumber.equal(1);\nlogs[0].args.implementation.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "243ff040-6e82-4b07-9450-7c48ba15fd7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment version",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should increment version",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await instance.version.call()).should.be.bignumber.equal(0);\nconst {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n);\nlogs[0].event.should.be.equal(\"Upgraded\");\n(await instance.version.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "faf32143-0582-4139-8bf7-38a7d42ab96e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab143697-878d-4efe-9f3a-f2a5c344270e",
              "1d5c2d76-4771-40ae-8f4d-d685b89e26fe",
              "a773aa1f-9c79-4514-b96b-f5bff0443fe1",
              "243ff040-6e82-4b07-9450-7c48ba15fd7b",
              "faf32143-0582-4139-8bf7-38a7d42ab96e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 164,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ff4c76ff-0290-4ae9-a61a-fbf09a7b815d",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 262,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "811c0187-8fe5-4e6e-b2d1-59dc6e690ea6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e650bbd5-d5a3-454d-928f-2b860c8712f5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 635,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "6b2a1853-bf75-462f-b98a-1a15c3a2c663",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fad332f2-165f-492c-a8f6-f02cce43a36a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "eadceac6-ceee-4a8e-9605-c0b215707c98",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "c8491c94-b2ae-41f8-90aa-2c7b17da9ad1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "90e310ac-b430-403a-9d25-bc4fd6e6f72a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0a51277f-70aa-476a-bbc8-db13d54bd176",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8491c94-b2ae-41f8-90aa-2c7b17da9ad1",
              "90e310ac-b430-403a-9d25-bc4fd6e6f72a",
              "0a51277f-70aa-476a-bbc8-db13d54bd176"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 106,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b61d741e-9e15-4fe3-be48-0cf28af77400",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b4f35e3f-bc0e-4792-a867-c91fa3ab5a38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d0a24a22-d6fc-44b7-8490-d38d122c85b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e8a32820-6d78-41ba-a222-5e20f4075732",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ccdbb0e9-2035-48c4-bd7b-510fb1e483ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0b44050a-8696-4c0b-859a-b6b915edc0eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 635,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b81f89fe-ebd8-4010-b861-e38012c53c66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "db3901f2-3087-4ff5-83f9-989b5b2769c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "553dd2e3-f459-41b4-bead-358efe36d3be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4f35e3f-bc0e-4792-a867-c91fa3ab5a38",
              "d0a24a22-d6fc-44b7-8490-d38d122c85b9",
              "e8a32820-6d78-41ba-a222-5e20f4075732",
              "ccdbb0e9-2035-48c4-bd7b-510fb1e483ce",
              "0b44050a-8696-4c0b-859a-b6b915edc0eb",
              "b81f89fe-ebd8-4010-b861-e38012c53c66",
              "db3901f2-3087-4ff5-83f9-989b5b2769c4",
              "553dd2e3-f459-41b4-bead-358efe36d3be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1309,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "47c29165-781e-4f77-94b1-b3544d567e98",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 162,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e35e0c27-605a-4cff-9ddf-b449163e8a15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 223,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c491ebb9-8578-4a7d-912a-ec856db5b5ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "453aa92e-45d3-46a4-8ad1-8766cf1a9f50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1ce0f9df-2486-4cea-b803-bf7e9ade9a33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 376,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "2b59b000-efb8-4dbe-873a-7c9fe3877234",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "76e1c0bc-a216-47ec-b826-82163b19bc91",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8c9b2993-34b5-4fcc-9ebc-c0649fb6fad9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ce6dd148-9b64-4fa2-9491-4277e41033f6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "ca7d4fcc-3436-4c1c-99b8-0063e1091407",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "eb3d280b-44b0-4844-9af9-47826faf5297",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e35e0c27-605a-4cff-9ddf-b449163e8a15",
              "c491ebb9-8578-4a7d-912a-ec856db5b5ea",
              "453aa92e-45d3-46a4-8ad1-8766cf1a9f50",
              "1ce0f9df-2486-4cea-b803-bf7e9ade9a33",
              "2b59b000-efb8-4dbe-873a-7c9fe3877234",
              "76e1c0bc-a216-47ec-b826-82163b19bc91",
              "8c9b2993-34b5-4fcc-9ebc-c0649fb6fad9",
              "ce6dd148-9b64-4fa2-9491-4277e41033f6",
              "ca7d4fcc-3436-4c1c-99b8-0063e1091407",
              "eb3d280b-44b0-4844-9af9-47826faf5297"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1999,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0ad69dc5-b5ed-40f3-a8bd-b0016d4ee822",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "a777f253-2a61-4a1e-9a8f-dba478b93eb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "bdbf5746-6506-4214-a7cb-419ad31bc830",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "64483ac4-910a-4022-99b4-c6f0bbc66064",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "dc02dd9b-4f17-4d3e-b75f-0771d960074d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a777f253-2a61-4a1e-9a8f-dba478b93eb9",
              "bdbf5746-6506-4214-a7cb-419ad31bc830",
              "64483ac4-910a-4022-99b4-c6f0bbc66064",
              "dc02dd9b-4f17-4d3e-b75f-0771d960074d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 468,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "71b5ac07-d34f-4c31-a7d8-fb579c8b6771",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "2115236c-05ef-4f06-b6d2-81833825eb1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "627ccf32-68af-48df-a2ac-5d183de9a43d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "7faf3200-a0ba-4660-a4ef-330e29485f47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 242,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "fb10991a-d019-4514-a098-773a3bd5e9d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 243,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "271b65fe-03d8-4c34-8641-02900acc31e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2115236c-05ef-4f06-b6d2-81833825eb1f",
              "627ccf32-68af-48df-a2ac-5d183de9a43d",
              "7faf3200-a0ba-4660-a4ef-330e29485f47",
              "fb10991a-d019-4514-a098-773a3bd5e9d3",
              "271b65fe-03d8-4c34-8641-02900acc31e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1065,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d7c038e9-1b52-43d0-a1be-a3bbeba30a33",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "36921fa4-8afd-477e-b9fe-de2eb40f88ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "949a0649-3a57-4717-8b13-27e85c8fa81c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "4c7333c9-da92-4fdb-be92-f095e6ea60b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "37d023a7-11e5-4db7-ab34-024f6caba98d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 241,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "43a87517-95fa-430f-a889-a3ff88b3f8c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36921fa4-8afd-477e-b9fe-de2eb40f88ef",
              "949a0649-3a57-4717-8b13-27e85c8fa81c",
              "4c7333c9-da92-4fdb-be92-f095e6ea60b5",
              "37d023a7-11e5-4db7-ab34-024f6caba98d",
              "43a87517-95fa-430f-a889-a3ff88b3f8c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 968,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "40778930-3f0d-40ea-a7c8-e8c1a02133bd",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "57dab88f-323d-4b32-94ab-1ea527cb19a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 709,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "7bfb2b41-327e-454b-8471-cc67ad9fe463",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 354,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "687386e7-ce6e-43b7-b113-ca370818184f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 1048,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "ff9c62c9-175e-4b43-b80e-9c674be49b41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 314,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d0edfca4-5160-4982-8ab4-997172c2ac85",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "57dab88f-323d-4b32-94ab-1ea527cb19a1",
              "7bfb2b41-327e-454b-8471-cc67ad9fe463",
              "687386e7-ce6e-43b7-b113-ca370818184f",
              "ff9c62c9-175e-4b43-b80e-9c674be49b41",
              "d0edfca4-5160-4982-8ab4-997172c2ac85"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2593,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cd88a9d2-9c3e-47b0-9d43-0f386a2a2f71",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 226,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "93376f79-a39b-4c99-ba42-f07ca5ee24e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "271e4854-7cb6-4a13-a6f4-9bfef7342e52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "812363c9-0e25-43c3-8df8-64d59330e173",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "93376f79-a39b-4c99-ba42-f07ca5ee24e8",
              "271e4854-7cb6-4a13-a6f4-9bfef7342e52",
              "812363c9-0e25-43c3-8df8-64d59330e173"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 724,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0e4dd1fb-da27-44d5-b8b7-a84b719d5fc3",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 225,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "ed7edf7a-b85e-4d4e-a9ca-d65953cb1942",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "3346eb18-5463-476f-94e2-b0447be25b91",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 378,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "4df60248-18c8-4bad-9a29-a6d40039a1e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ed7edf7a-b85e-4d4e-a9ca-d65953cb1942",
              "3346eb18-5463-476f-94e2-b0447be25b91",
              "4df60248-18c8-4bad-9a29-a6d40039a1e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 864,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a8c1ace9-3301-43ee-8487-79891d9a9e9d",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 780,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "a86deeb6-f29e-475a-b889-30d3e4b7c68b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 396,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9f121bf8-a493-47df-b4a7-5ff308e46ae8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 612,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "b6dee990-280b-44d4-9f22-bb92064831b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a86deeb6-f29e-475a-b889-30d3e4b7c68b",
              "9f121bf8-a493-47df-b4a7-5ff308e46ae8",
              "b6dee990-280b-44d4-9f22-bb92064831b6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1788,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "63a7b28f-c922-4b1c-9db5-cc8716798a58",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 227,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "64b1743d-9049-45fd-b7f4-87021b801500",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "64b1743d-9049-45fd-b7f4-87021b801500"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 227,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "da817815-2cad-4786-9436-6726021bebb0",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 356,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "06f1ee8f-b95f-497b-a86e-ec0a15f32b0e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06f1ee8f-b95f-497b-a86e-ec0a15f32b0e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 356,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "091d5c5c-c37e-4ad8-b01f-e08967af05d5",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 407,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "db72c561-8b77-4c20-8058-3d97e0f5d5ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "db72c561-8b77-4c20-8058-3d97e0f5d5ab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 407,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8e101799-fd77-4f2e-bd97-6c69a1f907c1",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d93cacbb-a880-42c5-98e6-9dfb70e89cf2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 229,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c550148f-a52a-42c4-885b-750a080dc91a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d93cacbb-a880-42c5-98e6-9dfb70e89cf2",
              "c550148f-a52a-42c4-885b-750a080dc91a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1498,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "64df2bc8-67b6-49a3-afd4-de1660923ef0",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 181,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nkeysManager = await KeysManagerMock.new();\nkeysManagerOldImplementation = keysManager.address;\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nawait keysManager.setProxyStorage(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "9ed41c51-92f7-45b4-ad6d-4ec5a73fb467",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "998cfa0c-c45f-4307-974e-73c35367a6b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet newImplementation = keysManagerNew.address;\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(keysManagerOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "eb2051ed-3294-438f-ba07-bf88fb2fc824",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet oldVersion = await keysManagerEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "afd238f6-eda3-4705-bd5c-419ccb0634b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.initialized.call()).should.be.equal(false);\nawait keysManagerNew.initialize();\n(await keysManagerNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "081ad853-d2a0-425e-b0c5-9ef4cfe39a7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "a6118081-024a-4b38-a044-7b2116447d99",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 346,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keys = await keysManager.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nawait keysManager.setProxyStorage(proxyStorageMock.address);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManager.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\nkeys = await keysManagerNew.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([accounts[3], accounts[4], true, true, true]);",
                "err": {},
                "isRoot": false,
                "uuid": "9b0031cc-5cd3-4b18-982d-1fb75072f5d9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "998cfa0c-c45f-4307-974e-73c35367a6b1",
              "eb2051ed-3294-438f-ba07-bf88fb2fc824",
              "afd238f6-eda3-4705-bd5c-419ccb0634b1",
              "081ad853-d2a0-425e-b0c5-9ef4cfe39a7e",
              "a6118081-024a-4b38-a044-7b2116447d99",
              "9b0031cc-5cd3-4b18-982d-1fb75072f5d9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 866,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1c5f9113-3d99-447a-b25d-a0e66905f42b",
        "title": "Contract: KeysManager upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
        "file": "/test/keys_manager_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3399,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a8628ffd-9ed9-4a52-9f0f-4a60764dc02b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dae87983-6064-4627-b40e-14756fe4b562",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 978,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait keysManagerEternalStorage.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerNew.at(keysManagerEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "13384132-9116-4632-b982-8dd51cc2a458",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e85132f6-c45f-4d80-85dd-b55bff3112d9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a6126712-2416-41b2-978a-885ef4cc5c3c",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "af5723e3-548f-4882-8fc8-19fa84292060",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1b0b7189-b581-4a55-9e7f-d08592cf9c90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5befbe8a-2185-421d-a74f-dbf1d5c44bdd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "af5723e3-548f-4882-8fc8-19fa84292060",
              "1b0b7189-b581-4a55-9e7f-d08592cf9c90",
              "5befbe8a-2185-421d-a74f-dbf1d5c44bdd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 116,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "33e1e734-c26a-458b-9be0-c51b14cb49ef",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "21b88dc8-1ac3-4760-b733-adaf9a170018",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b97c12d9-223f-4e7b-81ac-bf9ce0901165",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "57714528-b772-4654-8e87-bfc41ce64250",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 229,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6fec0625-393b-48a1-b431-0405f1efac8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "46f75e06-eeb6-47ca-aa36-a8db460e6875",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 621,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3c616c3b-da29-4da7-aad1-fa0149a79d25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "ee6b2344-4fe2-450c-9424-fd6bec0dd48f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "7013559c-239d-494e-91fd-fd629f11452c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "21b88dc8-1ac3-4760-b733-adaf9a170018",
              "b97c12d9-223f-4e7b-81ac-bf9ce0901165",
              "57714528-b772-4654-8e87-bfc41ce64250",
              "6fec0625-393b-48a1-b431-0405f1efac8c",
              "46f75e06-eeb6-47ca-aa36-a8db460e6875",
              "3c616c3b-da29-4da7-aad1-fa0149a79d25",
              "ee6b2344-4fe2-450c-9424-fd6bec0dd48f",
              "7013559c-239d-494e-91fd-fd629f11452c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1321,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "473f1d35-152c-4772-9843-97302f07aa84",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8a725108-673d-4c2b-976a-1262f1f8f569",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 242,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6fc32cad-9043-4f3f-93a0-068883101fd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8f34764e-2015-4ea6-86d0-8dfd1cfeb7d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "313e38d7-b74e-4548-8443-170f53b14894",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 404,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0f8dee9f-077a-4824-bb7c-4dddb1cebd6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 207,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "47bccdf6-3767-4a7a-a4b1-ab647ab1e5f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "50130f04-317a-41a3-86be-16df89a7ee56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9bd6853c-7b60-43df-8145-d6a98cb958fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "49395dd5-dde5-4b80-b271-d9728e7c520c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "4f7687d2-5ac7-40c9-83fa-18ac21b025ab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a725108-673d-4c2b-976a-1262f1f8f569",
              "6fc32cad-9043-4f3f-93a0-068883101fd9",
              "8f34764e-2015-4ea6-86d0-8dfd1cfeb7d2",
              "313e38d7-b74e-4548-8443-170f53b14894",
              "0f8dee9f-077a-4824-bb7c-4dddb1cebd6c",
              "47bccdf6-3767-4a7a-a4b1-ab647ab1e5f8",
              "50130f04-317a-41a3-86be-16df89a7ee56",
              "9bd6853c-7b60-43df-8145-d6a98cb958fe",
              "49395dd5-dde5-4b80-b271-d9728e7c520c",
              "4f7687d2-5ac7-40c9-83fa-18ac21b025ab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2042,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8af896cf-3fa9-46fd-96a0-459439679f4f",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "0075ac97-b828-458a-ae0e-cff1fb7efa53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "b63c7564-03f4-441d-af15-197086308878",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "82e58aeb-c7a7-4bcb-9268-fce5ce9de589",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "9f6ad843-515b-4888-8c4d-4166a08f5cb2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0075ac97-b828-458a-ae0e-cff1fb7efa53",
              "b63c7564-03f4-441d-af15-197086308878",
              "82e58aeb-c7a7-4bcb-9268-fce5ce9de589",
              "9f6ad843-515b-4888-8c4d-4166a08f5cb2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 495,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "95f8a383-4356-4ae6-9c16-d2a38b1f47cf",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "575b318e-6acb-43f4-8b39-b955491b8da9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "46b9181e-afe8-436d-bbae-5a20b5d61df4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "e510f93c-3d97-4ef6-934d-462b4a71d107",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 242,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "bb0ae1d3-52a9-4c37-9420-d82a47efaa91",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "e6130f9a-d689-4759-b8a9-96d455675249",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "575b318e-6acb-43f4-8b39-b955491b8da9",
              "46b9181e-afe8-436d-bbae-5a20b5d61df4",
              "e510f93c-3d97-4ef6-934d-462b4a71d107",
              "bb0ae1d3-52a9-4c37-9420-d82a47efaa91",
              "e6130f9a-d689-4759-b8a9-96d455675249"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 986,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c335259e-67b5-4806-a98c-7c259a0befa9",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "095358e0-1411-4c59-a1e3-243f3c6238cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "ccd3498a-ce5a-4f28-98d4-cff7d7f81cbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "3d79166a-fefe-4158-bd9f-c9fe568f43a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "5272b183-be50-4242-8232-e5f8807c5f1d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0f902c0d-474b-4ebb-973f-2f3bd92d36f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "095358e0-1411-4c59-a1e3-243f3c6238cc",
              "ccd3498a-ce5a-4f28-98d4-cff7d7f81cbe",
              "3d79166a-fefe-4158-bd9f-c9fe568f43a2",
              "5272b183-be50-4242-8232-e5f8807c5f1d",
              "0f902c0d-474b-4ebb-973f-2f3bd92d36f4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1085,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1ff8005d-f56c-4f98-a0ad-e19dfe423e6a",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "ada966a7-d59c-4fda-b91b-773c0f775411",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 792,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "0e2b2d0f-449f-42ce-892a-bb227e00ca40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 345,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "2b534245-4c3e-4615-b214-da4238779b24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 1076,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "a7c67fda-acce-45d8-b10a-81b813f67119",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "54dbc2fd-79f2-4786-8c5f-b75a20c5c47e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ada966a7-d59c-4fda-b91b-773c0f775411",
              "0e2b2d0f-449f-42ce-892a-bb227e00ca40",
              "2b534245-4c3e-4615-b214-da4238779b24",
              "a7c67fda-acce-45d8-b10a-81b813f67119",
              "54dbc2fd-79f2-4786-8c5f-b75a20c5c47e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2748,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "25cf3d2b-587c-4720-8bc7-989f3bb1dcee",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 228,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "5db060ff-94f5-4682-98ff-addadd728ee4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 338,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "c7f47cbc-541e-4adc-9ffc-b73d629d8ffe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "bed0ab26-8bb5-4b82-82eb-8e19ddb4e8b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5db060ff-94f5-4682-98ff-addadd728ee4",
              "c7f47cbc-541e-4adc-9ffc-b73d629d8ffe",
              "bed0ab26-8bb5-4b82-82eb-8e19ddb4e8b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 828,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f2a45862-ccb9-42bd-b6b0-67fac3eddb63",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "fafd6b1f-5d98-404d-a1f7-b4a654cb7c82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 325,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "5bc9dc33-0650-4559-94d5-8cb41eb4be82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "2f11cd74-7c19-47f3-bce4-b52d8b2545bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fafd6b1f-5d98-404d-a1f7-b4a654cb7c82",
              "5bc9dc33-0650-4559-94d5-8cb41eb4be82",
              "2f11cd74-7c19-47f3-bce4-b52d8b2545bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 805,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "96373f01-4f60-4aa0-8690-419da6ecc830",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 812,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "584dae0c-f999-4992-9ce6-9387acbedfe3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 378,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "cda01c92-9927-4161-832b-af45b7b28f27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 600,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "a38e82f2-971b-4c8b-b694-153857e0184f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "584dae0c-f999-4992-9ce6-9387acbedfe3",
              "cda01c92-9927-4161-832b-af45b7b28f27",
              "a38e82f2-971b-4c8b-b694-153857e0184f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1790,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3d349907-4ca1-4d9a-a703-2de6ce012146",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 354,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d553646f-04f1-49cb-9220-869e00ea3bfa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d553646f-04f1-49cb-9220-869e00ea3bfa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 354,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "568bd5d5-0838-4b02-8962-4c17d5ef1ac7",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8e6bb41b-e481-472a-a41e-60c1b89b5067",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8e6bb41b-e481-472a-a41e-60c1b89b5067"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 263,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8cc40d99-4d30-458b-84c9-c656c5110bcf",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 527,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "25a74618-416b-4bbf-b538-5869e6dde3a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "25a74618-416b-4bbf-b538-5869e6dde3a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 527,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7f004b18-1874-414b-bfe5-48379de674dd",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b7c63db0-d6bf-4aba-ad3a-648aa813ba2b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d78ecbc2-2a9d-44b0-8069-645357769384",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b7c63db0-d6bf-4aba-ad3a-648aa813ba2b",
              "d78ecbc2-2a9d-44b0-8069-645357769384"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1446,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "539cdcb2-77e4-4736-9a4e-1339060c4e3f",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3659,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "368ad343-f9f2-448a-8f9c-16c483984627",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c16dd587-007b-4ec4-b3f8-c982d0884dae",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 965,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\n\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "f18ee8cd-77f0-40dd-8aeb-9eac1784c29c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3dc67c30-34f3-4e2b-bfa6-f7aac2a7f91a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "e10897b3-6adc-442d-9a91-ec3328098809",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "3fff7dc8-142c-4b48-871e-2c6f59733cd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 223,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "f1166263-5b65-4f07-bd31-693ab015d32e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "659bea71-5009-4b79-8bdc-f099803cceb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0b1ece2c-dbdb-4fb8-ad57-eb5dfbe1928b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3fff7dc8-142c-4b48-871e-2c6f59733cd9",
              "f1166263-5b65-4f07-bd31-693ab015d32e",
              "659bea71-5009-4b79-8bdc-f099803cceb1",
              "0b1ece2c-dbdb-4fb8-ad57-eb5dfbe1928b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 696,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "abe93a53-56af-46d4-9221-4b98c71525f2",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 890,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "0b51d783-8ce8-4471-9f73-5bda63c01eea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0b51d783-8ce8-4471-9f73-5bda63c01eea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 890,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0316ef1f-f38a-4ccb-82b8-ac740977192d",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 1260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "eb955f6a-77da-4b4f-ac16-cdf84f2b42ff",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb955f6a-77da-4b4f-ac16-cdf84f2b42ff"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1260,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7303deea-ab09-422a-aee6-46b879b60088",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 483,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "78955af7-993a-447c-ac74-a16ceb5ed7a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78955af7-993a-447c-ac74-a16ceb5ed7a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 483,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "64d46dca-acb9-40c9-ac2d-38c05b98dc9b",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 119,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ea9548ef-c918-4c4d-98ff-531373f2a650",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "3d6265e2-62b3-46e6-a70c-a01048193af5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1f97d1a7-5d7f-42c4-bf3d-ebfd6301ae3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 575,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "f6cd79d5-c6fb-4a6a-9df7-0183a05d8ba7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d6265e2-62b3-46e6-a70c-a01048193af5",
              "1f97d1a7-5d7f-42c4-bf3d-ebfd6301ae3f",
              "f6cd79d5-c6fb-4a6a-9df7-0183a05d8ba7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 807,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5dc9442d-0016-4736-8ecb-c9ce906b5576",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 629,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ce3ce907-c5c8-4f70-b562-974a37374509",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 543,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "2fd0cfe9-1c7c-4844-a74e-4d37c8fce3de",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ce3ce907-c5c8-4f70-b562-974a37374509",
              "2fd0cfe9-1c7c-4844-a74e-4d37c8fce3de"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1172,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "847c599a-68cd-4ca7-9d0d-536bbe6936e5",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "29cc84bb-0de8-47fa-8325-dfa18e4dd849",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 315,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "04416875-906d-446c-8610-2e9cc52e09fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 389,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "84b8cca0-f296-4878-950e-f9c513d30a92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 596,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "aede6dac-ae88-473c-8aad-71c853f9dd07",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "29cc84bb-0de8-47fa-8325-dfa18e4dd849",
              "04416875-906d-446c-8610-2e9cc52e09fe",
              "84b8cca0-f296-4878-950e-f9c513d30a92",
              "aede6dac-ae88-473c-8aad-71c853f9dd07"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1572,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7f803139-5b2c-4ace-8a90-831dd2c52d59",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 863,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "f265ceb9-605c-414e-a85c-e8a1b8de858a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f265ceb9-605c-414e-a85c-e8a1b8de858a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 863,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "db6c74ce-7cfe-4e5d-8f99-f8a954749ecd",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "781f77ca-5efe-425b-8f97-ccff571ba788",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "781f77ca-5efe-425b-8f97-ccff571ba788"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "862cf30f-9fe9-4c66-b1c0-f5327c556e20",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 92,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nmetadata = await ValidatorMetadata.new();\nmetadataOldImplementation = metadata.address;\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "a4e6cc3b-0bb4-4ac6-984c-f70b7b8c662a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "2fa2b23c-fe2e-4a6a-a1c7-b727fec21b80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet newImplementation = metadataNew.address;\n(await metadataEternalStorage.implementation.call()).should.be.equal(metadataOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "6dcf6de1-e4b6-4f1c-9edd-b0c340790ddd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldVersion = await metadataEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "35819d73-0935-49ab-a560-805860f1a9a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.initialized.call()).should.be.equal(false);\nawait metadataNew.initialize();\n(await metadataNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "90dcab75-f2f1-4718-af14-ab80f29bba18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "3c07f529-b862-43de-8ccd-f2f9aaef5e97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 328,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(55555);\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadataEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nconst validators = await metadataNew.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "7b5a53ce-7874-4ea5-9d07-665f2452ee09",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2fa2b23c-fe2e-4a6a-a1c7-b727fec21b80",
              "6dcf6de1-e4b6-4f1c-9edd-b0c340790ddd",
              "35819d73-0935-49ab-a560-805860f1a9a5",
              "90dcab75-f2f1-4718-af14-ab80f29bba18",
              "3c07f529-b862-43de-8ccd-f2f9aaef5e97",
              "7b5a53ce-7874-4ea5-9d07-665f2452ee09"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 849,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d4c95f24-36cd-4047-b966-b5ffddc04695",
        "title": "Contract: ValidatorMetadata upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
        "file": "/test/metadata_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1995,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "d2d2aa48-3733-470a-a1c6-daf0c4eb1ba2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a951494a-2ecb-429f-a669-41867c22d172",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1071,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "f46b6ea4-3636-4929-a4c3-5b52cf9c9b67",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b62fde8f-8edb-4e14-a0f0-b03fca5d408d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "17e68b2e-58c0-416c-8684-c42e0c89ef23",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "c01f37f1-95bc-44bf-b67a-b05b18bff092",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 214,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "7b956061-38fc-469d-87eb-2bb96f821c18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "ce6833a0-0b53-469e-8faf-1734c9dcedf4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "20ed13a8-6b9b-46be-af43-6d6b05801d9d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c01f37f1-95bc-44bf-b67a-b05b18bff092",
              "7b956061-38fc-469d-87eb-2bb96f821c18",
              "ce6833a0-0b53-469e-8faf-1734c9dcedf4",
              "20ed13a8-6b9b-46be-af43-6d6b05801d9d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 668,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4d9657ca-e42f-45ce-8748-743a79004fdb",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 751,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "5e6675ed-4411-4e62-a537-3736022c0f3e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5e6675ed-4411-4e62-a537-3736022c0f3e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 751,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7b1cabaf-ffed-48fe-98af-86cda9013f57",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 1337,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "f91129e6-1937-4e56-8fd6-3c7556e85825",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f91129e6-1937-4e56-8fd6-3c7556e85825"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1337,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "60a5eedb-f036-40a2-bffb-96dd678af285",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 559,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2ebb6c7e-5b13-4bfb-afd9-bd345ede4e13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2ebb6c7e-5b13-4bfb-afd9-bd345ede4e13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 559,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "aa58573e-cbfe-4dfb-8213-567ffe6e3de6",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 124,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8344fd6a-c22d-4efc-a220-e295b6fd2a43",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 195,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9b2e32ab-5395-4b8e-9a32-a8ebefafc028",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "69ed1d93-7254-4301-89d7-c02e63367d5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 589,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "ea300f31-afa0-48dd-9bae-fb83f074f10d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b2e32ab-5395-4b8e-9a32-a8ebefafc028",
              "69ed1d93-7254-4301-89d7-c02e63367d5f",
              "ea300f31-afa0-48dd-9bae-fb83f074f10d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 822,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "737deeb8-ff6c-4c29-869b-db2f0488e283",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 642,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a2fcf135-a60c-4976-823f-b397d694ab16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 560,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "43cfa6b2-65da-4773-9aa7-f07d1c691202",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a2fcf135-a60c-4976-823f-b397d694ab16",
              "43cfa6b2-65da-4773-9aa7-f07d1c691202"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1202,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "40257925-b85d-432f-aa23-269aa861d82e",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ebfa450f-a0fe-4cd3-bf21-e483b9ea8a07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 333,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "87bc63c6-98fa-4504-b6b8-8f666a0dee83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "21f2f041-2eb3-44c5-9ba6-50d40ca8e732",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 625,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "78c9b07e-b820-4ce3-9f8e-d8bef86e2484",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ebfa450f-a0fe-4cd3-bf21-e483b9ea8a07",
              "87bc63c6-98fa-4504-b6b8-8f666a0dee83",
              "21f2f041-2eb3-44c5-9ba6-50d40ca8e732",
              "78c9b07e-b820-4ce3-9f8e-d8bef86e2484"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1700,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0fe8c168-d99f-4f2a-8a53-fa5ef63443db",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 959,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "195532a6-a21d-4467-b959-483fa4432528",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "195532a6-a21d-4467-b959-483fa4432528"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 959,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "45b83e21-1c17-441e-9dbb-af15f1588930",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "99bd6af6-1bfd-4045-bc59-a49fb4d2d856",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "99bd6af6-1bfd-4045-bc59-a49fb4d2d856"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6720e8de-583d-4e92-afa5-804d0913c554",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1778,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "49feed11-d4e7-41d9-b835-73507ed96483",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5cf0424a-3624-4aa0-878c-82ef5e7d31a3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 254,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[9];\nawait PoaNetworkConsensus.new('0x0000000000000000000000000000000000000000', []).should.be.rejectedWith(ERROR_MSG);\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []).should.be.fulfilled;;\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.rejectedWith(ERROR_MSG);\n\nawait proxyStorageMock.initializeAddresses(\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "782be8be-8249-45ea-ac32-a64b649ef249",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7f4734fb-34e2-4753-96fa-ea8148b23cef",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "741e11f5-b468-44d3-9ba6-9970f15412a7",
            "title": "default values",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators.call();\nlet finalized = await poaNetworkConsensus.finalized.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "3e71a501-139f-4e9c-986f-64511a302c22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress.call();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "cc637ed3-803c-4648-895a-ee34764fe723",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allows you to set current list of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values allows you to set current list of validators",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorsList = [accounts[2], accounts[3], accounts[4]];\nlet poa = await PoaNetworkConsensus.new(masterOfCeremony, validatorsList).should.be.fulfilled;\nlet validators = await poa.getValidators.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony,\n  ...validatorsList\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "0acc6c97-c452-45d7-a847-6dd68e0c0044",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "validators in the list must differ",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values validators in the list must differ",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [masterOfCeremony, accounts[3], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[2], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[3], accounts[3]]\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2b4bac81-a72d-489b-a1b1-84632ea5abfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e71a501-139f-4e9c-986f-64511a302c22",
              "cc637ed3-803c-4648-895a-ee34764fe723",
              "0acc6c97-c452-45d7-a847-6dd68e0c0044",
              "2b4bac81-a72d-489b-a1b1-84632ea5abfb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 241,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "48d06643-d423-4b8b-ab8a-f11925b5baba",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2f39fa6b-c62e-4206-bd89-7f00554d13c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "7c48cae3-f63c-4622-9793-a13e1cd52f1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "8a08e3ae-ccb5-4de9-b47b-37b002d655af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 317,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "0c94e9e8-a841-4467-9c31-d17a4d5ff3da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2f39fa6b-c62e-4206-bd89-7f00554d13c9",
              "7c48cae3-f63c-4622-9793-a13e1cd52f1b",
              "8a08e3ae-ccb5-4de9-b47b-37b002d655af",
              "0c94e9e8-a841-4467-9c31-d17a4d5ff3da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 545,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "518c33a2-fd50-42af-953f-de6e406d19b3",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait addValidator(accounts[1], true, {from: accounts[5]});",
                "err": {},
                "isRoot": false,
                "uuid": "8214e253-54ca-4fa1-b0a4-22d6100c67eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait addValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "ea842c95-93f1-43bd-8f25-dce1b13a9501",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator('0x0', false);\nawait addValidator('0x0000000000000000000000000000000000000000', false);",
                "err": {},
                "isRoot": false,
                "uuid": "cc641fce-e3b4-4111-9a25-ac0e13bd0263",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList.call();\nstate[0].should.be.true;\nstate[2].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "102622e0-ff74-4f80-8fd4-13d81794724f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "324ae4e5-630a-4385-bf5d-872c0defcdeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "ced9a78b-523f-452d-8391-41ac41c4f2fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8214e253-54ca-4fa1-b0a4-22d6100c67eb",
              "ea842c95-93f1-43bd-8f25-dce1b13a9501",
              "cc641fce-e3b4-4111-9a25-ac0e13bd0263",
              "102622e0-ff74-4f80-8fd4-13d81794724f",
              "324ae4e5-630a-4385-bf5d-872c0defcdeb",
              "ced9a78b-523f-452d-8391-41ac41c4f2fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 467,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a073b92c-0742-4dc1-a51c-61f08af8715d",
            "title": "#swapValidatorKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap validator key",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap validator key",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);\n\nawait swapValidatorKey(accounts[2], accounts[3], false);\nawait swapValidatorKey(accounts[2], accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "97bb3623-8f73-4a9a-accc-fb03449103b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap MoC",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n\nawait swapValidatorKey(accounts[1], masterOfCeremony, true);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "ce3a3920-07b7-4df3-bac5-fb0353708151",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "97bb3623-8f73-4a9a-accc-fb03449103b2",
              "ce3a3920-07b7-4df3-bac5-fb0353708151"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 563,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "dd8f196d-6a17-4619-be4a-c817f70572d8",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "b6c6948b-7695-4834-9a1f-86f7433c547f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove MoC",
                "timedOut": false,
                "duration": 239,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait removeValidator(masterOfCeremony, true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "1a9e7a7d-1811-4de4-adaf-7df751d28a24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await removeValidator(accounts[1], false);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "0089fcdb-e622-4050-a1a0-c90653d344a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait removeValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "00f8dbd9-971b-4570-89f8-391e7aba1c7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 331,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "f051f395-ead9-4763-9737-f10e70a9ee6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nstate[0].should.be.false;\nstate[2].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "3932e59e-9ff7-4b52-9671-e892c14080db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "9ea82952-51dd-4509-a9c0-0a88c68ec4e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b6c6948b-7695-4834-9a1f-86f7433c547f",
              "1a9e7a7d-1811-4de4-adaf-7df751d28a24",
              "0089fcdb-e622-4050-a1a0-c90653d344a8",
              "00f8dbd9-971b-4570-89f8-391e7aba1c7f",
              "f051f395-ead9-4763-9737-f10e70a9ee6b",
              "3932e59e-9ff7-4b52-9671-e892c14080db",
              "9ea82952-51dd-4509-a9c0-0a88c68ec4e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1046,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "348c88ab-dc3e-4fec-acb3-042e422ad999",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can be called by MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by MoC",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "02ba15d6-a0b2-4287-ac2a-874bf0325660",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called by owner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by owner",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[0]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "67fdba43-6b59-40b2-be3a-7059901f63b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(nonOwner, {from: nonOwner}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "62260ade-c08d-462e-9402-303e2b6d6962",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ab530b33-a356-48a5-adaa-7003148f64b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage.call()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "e6b3b38d-23d7-4810-933e-66538e9095a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets wasProxyStorageSet",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets wasProxyStorageSet",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.wasProxyStorageSet.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "29768d9f-1a9f-4b52-b89a-8286010cb238",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "784c7a9c-9ebd-4034-87c8-538be5b65bce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager.call()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "d074d18a-4e03-44e1-a442-a3f99bb3f8eb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02ba15d6-a0b2-4287-ac2a-874bf0325660",
              "67fdba43-6b59-40b2-be3a-7059901f63b8",
              "62260ade-c08d-462e-9402-303e2b6d6962",
              "ab530b33-a356-48a5-adaa-7003148f64b6",
              "e6b3b38d-23d7-4810-933e-66538e9095a4",
              "29768d9f-1a9f-4b52-b89a-8286010cb238",
              "784c7a9c-9ebd-4034-87c8-538be5b65bce",
              "d074d18a-4e03-44e1-a442-a3f99bb3f8eb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 392,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "49996639-d980-4dc0-a9d8-ffc2ba2bd2b0",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns true for validator",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "4734bb32-bc5e-443f-a60f-75b747e7bc19",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4734bb32-bc5e-443f-a60f-75b747e7bc19"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 29,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "44397bda-417a-4511-b97c-7e1dc0a15e47",
            "title": "#isValidatorFinalized",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for finalized validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidatorFinalized returns true for finalized validator",
                "timedOut": false,
                "duration": 1602,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.finalized.call()).should.be.true;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nfor (let i = 1; i <= 4; i++) {\n  await addValidator(accounts[i], true);\n}\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[1], accounts[2], accounts[3], accounts[4]\n]);\nawait swapValidatorKey(accounts[5], accounts[1], true);\n(await poaNetworkConsensus.getValidators.call()).should.not.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 5; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\nawait removeValidator(accounts[1], false);\nawait removeValidator(accounts[3], true);\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[4], accounts[2], accounts[5]\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "35bf9cc3-a41d-4318-9d8e-a83017efc42f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "35bf9cc3-a41d-4318-9d8e-a83017efc42f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1602,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "25d0e850-6a20-4841-8a39-a4eea9481a55",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1236,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "22141cb2-2eb2-4396-83cd-96a9897636ea",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "8d6d3bf8-d6c7-484a-995c-85014b12fc11",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 960,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "007121af-1a7a-4231-8bc7-5b5ac442fdbd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "591d8d03-1b96-43cc-a6ba-0d3d0e180906",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a1bd87a8-2dab-45b8-85a4-8f136b504e2e",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "dcf16740-b6b2-45e6-b04b-13a675c2f69e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dcf16740-b6b2-45e6-b04b-13a675c2f69e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "17c6021e-be4b-42dc-8d60-0ca9474564a9",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 161,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "18f689ba-03a2-4360-9217-7812c1910aaa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "62d080d7-3ef7-47c9-b332-5baeff152cb4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "18f689ba-03a2-4360-9217-7812c1910aaa",
              "62d080d7-3ef7-47c9-b332-5baeff152cb4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 250,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "41dab0d6-9cac-4052-bf46-7bd5adb9d00e",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 47,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a5b72319-3c86-4f55-9784-df74c38db45e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "614744d8-f633-4b7e-9167-3ddbea18e48d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "dad503db-2cba-410b-a1c5-ccfc7cf3c7ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "4c885230-75d8-4029-a711-dc548d1ee2f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "3f9248b0-5812-4668-bd99-ff086c762401",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "72dc3e64-c5b6-4cad-8c63-c956405c4d61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "07d71194-211f-4401-bb9b-158638d1ef7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "cb021a14-01c4-4041-8ec5-21428dfec7fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 164,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "4e03f0e0-6f0a-4b1e-a1ce-5f35c223e5b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 277,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "12376987-bfdd-4f92-a788-533b006a3a48",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "614744d8-f633-4b7e-9167-3ddbea18e48d",
              "dad503db-2cba-410b-a1c5-ccfc7cf3c7ec",
              "4c885230-75d8-4029-a711-dc548d1ee2f4",
              "3f9248b0-5812-4668-bd99-ff086c762401",
              "72dc3e64-c5b6-4cad-8c63-c956405c4d61",
              "07d71194-211f-4401-bb9b-158638d1ef7d",
              "cb021a14-01c4-4041-8ec5-21428dfec7fc",
              "4e03f0e0-6f0a-4b1e-a1ce-5f35c223e5b3",
              "12376987-bfdd-4f92-a788-533b006a3a48"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1505,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6624b90a-c5ac-4993-9743-effee1b3be3b",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage (itself)",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo may only be called by ProxyStorage (itself)",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nawait proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "eac49968-e5ef-46af-895e-e3fd9daffd50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7a797dab-0764-4432-a9b8-dcc8720f04de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nconst oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "e914933d-3059-4ef9-bc87-ff239a3959c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.initialized.call()).should.be.equal(false);\nawait proxyStorageNew.initialize();\n(await proxyStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "db6c9a63-2c8d-49c2-bc01-2d0e2d8158b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.getPoaConsensus.call()).should.be.equal(poaNetworkConsensus.address);",
                "err": {},
                "isRoot": false,
                "uuid": "d0a391ed-abc8-4cf5-b89a-b2bb34eb8391",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eac49968-e5ef-46af-895e-e3fd9daffd50",
              "7a797dab-0764-4432-a9b8-dcc8720f04de",
              "e914933d-3059-4ef9-bc87-ff239a3959c7",
              "db6c9a63-2c8d-49c2-bc01-2d0e2d8158b4",
              "d0a391ed-abc8-4cf5-b89a-b2bb34eb8391"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 711,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c1533f58-282a-492d-9fa4-c63162dc9352",
        "title": "Contract: ProxyStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
        "file": "/test/proxy_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1853,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "5a6855ba-839e-4b99-ad79-cb0b9ec4d007",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eca68a73-ca8f-4c90-8513-d2d7f74bdad3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 956,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nconst proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorage = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "ec4d95ec-0126-4976-b10d-077070f3a214",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "edccceee-1c26-4655-aaff-02e08614e687",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "f9c78db2-ef5a-4f44-bc34-9ad5cc01bc23",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "439b0c1c-8676-453f-8c55-8d2dd097b2d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "439b0c1c-8676-453f-8c55-8d2dd097b2d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 31,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5bd47c72-4dcd-4ff3-a8d6-8d16255ce552",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "4e132fa8-17d1-47f8-94d1-296fc2561a43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b1d32b48-a8e1-4522-8e8d-ac6f0d9c08a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4e132fa8-17d1-47f8-94d1-296fc2561a43",
              "b1d32b48-a8e1-4522-8e8d-ac6f0d9c08a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "05d71f4c-06b3-498c-bacf-61079c22aa1a",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 48,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "510ab245-f771-4448-9bf7-c92f10d25cd8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "2e162e6d-cda5-47b9-8598-4cc5a6a58698",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "4b5065c3-6adc-4c05-aece-2a0d7c9f0523",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e5fa03cb-d52c-4c58-85c2-54665cba954c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "302719a1-d7b5-4e63-b418-eec68882ff69",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "de75831a-a55e-4d55-9687-f6aa04e6868e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f65cd7f8-18a2-45ce-90a2-6efbc40cb0c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "bc6b2c7e-c19e-4959-8b4d-11af45b22ebc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f534ff83-bdd2-43ad-bc28-05e921b5c748",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "da47ab24-4ce5-4d73-b3c4-9f49d4774ed1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e162e6d-cda5-47b9-8598-4cc5a6a58698",
              "4b5065c3-6adc-4c05-aece-2a0d7c9f0523",
              "e5fa03cb-d52c-4c58-85c2-54665cba954c",
              "302719a1-d7b5-4e63-b418-eec68882ff69",
              "de75831a-a55e-4d55-9687-f6aa04e6868e",
              "f65cd7f8-18a2-45ce-90a2-6efbc40cb0c7",
              "bc6b2c7e-c19e-4959-8b4d-11af45b22ebc",
              "f534ff83-bdd2-43ad-bc28-05e921b5c748",
              "da47ab24-4ce5-4d73-b3c4-9f49d4774ed1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1477,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "574f3c31-c52e-40a0-be25-cbd45d11d92c",
        "title": "Contract: RewardByBlock [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
        "file": "/test/reward_by_block_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1260,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "205968f0-10db-4ced-82ba-ae337dd06966",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9e319b94-da27-4361-8d19-1f48613f8a82",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1044,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockOldImplementation = rewardByBlock.address;\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "38455f61-29da-4ec7-9583-7a2860ca95a5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4cfc477c-f091-435e-b824-c7ce6f378b0f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "f90894f2-e68f-47a2-9606-416b86692090",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d2074273-7bd8-476d-bc4f-514bc352bce9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ceb9ef6d-9665-4ee0-8aca-16855d6743e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "58ac7851-bc47-4f9d-a95a-e556ffdf58f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "353a8795-6672-4cda-9b8d-4599f9736630",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if mining key does not exist",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if mining key does not exist",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.removeMiningKey(miningKey3, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey3],\n  [0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.reward(\n  [miningKey2],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d4ac484f-8f62-4702-93c3-0f769192a6b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 1152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "a7669598-9eab-479b-85a4-550d052d7f10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "79775fb5-6a4b-4df6-902f-a05405133bda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1754,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "cfb944cd-9fd4-42c0-9b83-ac055c8420c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2074273-7bd8-476d-bc4f-514bc352bce9",
              "ceb9ef6d-9665-4ee0-8aca-16855d6743e2",
              "58ac7851-bc47-4f9d-a95a-e556ffdf58f2",
              "353a8795-6672-4cda-9b8d-4599f9736630",
              "d4ac484f-8f62-4702-93c3-0f769192a6b6",
              "a7669598-9eab-479b-85a4-550d052d7f10",
              "79775fb5-6a4b-4df6-902f-a05405133bda",
              "cfb944cd-9fd4-42c0-9b83-ac055c8420c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3557,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bf2ee9d7-2234-4e66-9adf-c6c4bbe2666d",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "ab81e4c0-03ea-4d4f-ab68-66f15232b493",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3d297920-1dfd-49c0-af70-8de8a4d19f4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4bf25763-b3fe-4c63-94f6-fc2c57c1b746",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 404,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d753f1a2-bd97-490c-ae41-618cf1e4eabd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "220a7da2-d1e7-4740-b634-eca21bbdafe3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab81e4c0-03ea-4d4f-ab68-66f15232b493",
              "3d297920-1dfd-49c0-af70-8de8a4d19f4a",
              "4bf25763-b3fe-4c63-94f6-fc2c57c1b746",
              "d753f1a2-bd97-490c-ae41-618cf1e4eabd",
              "220a7da2-d1e7-4740-b634-eca21bbdafe3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 684,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "aeda6f20-94fa-42c6-8222-6809ba7f8e9f",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "13e43df3-a56b-4115-8b78-9cd076b71510",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst newImplementation = rewardByBlockNew.address;\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(rewardByBlockOldImplementation);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "ad086ba8-fabe-4a39-bacc-7d6b432459ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst oldVersion = await rewardByBlockEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "153c85bb-e9b3-4f8b-8e8d-f6cb9a303f44",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.initialized.call()).should.be.equal(false);\nawait rewardByBlockNew.initialize();\n(await rewardByBlockNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "8e61cfe7-f9ba-4065-b4e6-064545a21dcc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "7fca2674-2f39-46e3-af65-5f7202e87b21",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13e43df3-a56b-4115-8b78-9cd076b71510",
              "ad086ba8-fabe-4a39-bacc-7d6b432459ce",
              "153c85bb-e9b3-4f8b-8e8d-f6cb9a303f44",
              "8e61cfe7-f9ba-4065-b4e6-064545a21dcc",
              "7fca2674-2f39-46e3-af65-5f7202e87b21"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 625,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "23b0ddaf-ed39-4d54-bd26-922c9dd6da61",
        "title": "Contract: RewardByBlock upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
        "file": "/test/reward_by_block_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1620,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "1c677c00-569a-4be4-a828-e81d3695fc0a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3eb0a3b0-4a7f-4ebc-8b01-8bbd85d08876",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1053,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nconst rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlock = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "a79efcea-0020-41ab-a5d2-0b867bb5cee0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "09bbfb15-2957-4f0b-8075-3197fdfcff3e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4434e67c-c743-40b1-b45e-2132e85f10bf",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "77f92c72-0343-4dad-983b-892bcb5550d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6410e333-83aa-4916-b822-cbe215297f95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "16360c49-1634-4229-9296-5210db7504ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5bc2318c-8539-4aaa-a390-26366e6990d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if mining key does not exist",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if mining key does not exist",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.removeMiningKey(miningKey3, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey3],\n  [0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.reward(\n  [miningKey2],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "53b0b2b9-4e9e-47f9-a695-ba5919dc4537",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 1222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "147c6639-a3c3-4dd3-a850-2a3cc07e9aa0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "5504d998-b11d-4809-8cf5-1e960b2a3b9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1586,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "82716e35-1c2b-49a9-9984-84fafb57e150",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77f92c72-0343-4dad-983b-892bcb5550d4",
              "6410e333-83aa-4916-b822-cbe215297f95",
              "16360c49-1634-4229-9296-5210db7504ea",
              "5bc2318c-8539-4aaa-a390-26366e6990d0",
              "53b0b2b9-4e9e-47f9-a695-ba5919dc4537",
              "147c6639-a3c3-4dd3-a850-2a3cc07e9aa0",
              "5504d998-b11d-4809-8cf5-1e960b2a3b9a",
              "82716e35-1c2b-49a9-9984-84fafb57e150"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3495,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ec345822-9022-4e63-a5d4-a4f07dde12b0",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "334b0368-8174-4ba7-8a82-a3e5618fa931",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bcfefc6a-7182-4991-9d11-89df9eb80d93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4d5dce1c-d0c1-4153-993b-0f52023d395c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 402,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "183312dc-3914-4031-9b02-da6ffffa2294",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "7af9faec-596f-4488-b89c-01ae2df30222",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "334b0368-8174-4ba7-8a82-a3e5618fa931",
              "bcfefc6a-7182-4991-9d11-89df9eb80d93",
              "4d5dce1c-d0c1-4153-993b-0f52023d395c",
              "183312dc-3914-4031-9b02-da6ffffa2294",
              "7af9faec-596f-4488-b89c-01ae2df30222"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 704,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "e9585ff0-2749-4761-87d9-f7488febe00d",
        "title": "Contract: RewardByTime [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
        "file": "/test/reward_by_time_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1199,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ea9d6851-632a-48f7-987b-d6f10433477e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3b409458-6740-4884-a4f1-8fede62e94c6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1093,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeOldImplementation = rewardByTime.address;\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "e8ae6c3b-97d8-410c-83e6-1e4345a81483",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0c08dda8-ce59-4deb-a79a-c1861062f808",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4a2cce49-98bb-48e7-b5cc-b60656e434af",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c67202b5-92f8-4d4c-9eff-d50c4d9275a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 3864,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "53231753-8da1-4b9a-b8ee-a725282ae544",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1562,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait addMiningKey(miningKey2);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "6ab74507-7572-493f-aa54-1032c2881d5b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c67202b5-92f8-4d4c-9eff-d50c4d9275a0",
              "53231753-8da1-4b9a-b8ee-a725282ae544",
              "6ab74507-7572-493f-aa54-1032c2881d5b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5572,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "aab63a87-4468-4ac4-809e-633a02e84e0c",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "9ccff113-af9c-4bc8-aa69-a034c43d6fbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst newImplementation = rewardByTimeNew.address;\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(rewardByTimeOldImplementation);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "5d80143f-cc5c-41fb-aac4-4bdea793b281",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst oldVersion = await rewardByTimeEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "be0a28ed-dd2a-453f-b06e-6068f07064c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.initialized.call()).should.be.equal(false);\nawait rewardByTimeNew.initialize();\n(await rewardByTimeNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "010756a7-185e-4881-b588-bc57f19070a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "54c07c8a-31c2-4a9c-bb06-6b3662086b59",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ccff113-af9c-4bc8-aa69-a034c43d6fbd",
              "5d80143f-cc5c-41fb-aac4-4bdea793b281",
              "be0a28ed-dd2a-453f-b06e-6068f07064c2",
              "010756a7-185e-4881-b588-bc57f19070a8",
              "54c07c8a-31c2-4a9c-bb06-6b3662086b59"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 628,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c0d39aa3-1b2c-4031-a174-d0f324f7d99d",
        "title": "Contract: RewardByTime upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
        "file": "/test/reward_by_time_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 771,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "4a16dd5a-576c-46f8-9131-3ebdabed36e8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c74141b5-0376-40a1-b41b-17bcd145c92d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1144,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nconst rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTime = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "6ca6eb1d-cb2f-42c0-931b-b2618a6113e5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9cc57e98-bfa0-41b5-9850-ac5dc08e76e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "19a0e9c9-13d7-41c1-ae92-214b0a4ff40f",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
            "file": "/test/reward_by_time_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e5181277-4586-4905-b250-93bb28e227be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 3731,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "39888fbe-146a-48f6-b96f-8f7a7d3aa3ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1412,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait addMiningKey(miningKey2);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "1c7cb7f2-0c34-4051-9ead-e9b310e6de03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5181277-4586-4905-b250-93bb28e227be",
              "39888fbe-146a-48f6-b96f-8f7a7d3aa3ed",
              "1c7cb7f2-0c34-4051-9ead-e9b310e6de03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5317,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "34b010e6-dfe6-4ebe-9d84-16c95ce7eb77",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 499,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ec8b8666-3931-4c4b-b095-454bc1f83c6f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "741e35f6-25c4-40f9-9699-2fd2e29deaf9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 734,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "5e76f92e-f8cb-48ea-bc81-b17079d04fad",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "df18e90a-7462-4833-a3cb-52866ea007f2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "2eecac34-6262-4ac6-848b-738ee2de195a",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 802,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "f62e06c9-e7f6-4b4f-9d13-0a172ccef228",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "21f30c99-674f-454d-ac01-b3196b255131",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 461,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1b9c9246-095a-4dfc-9956-e3ad8a4eada7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 455,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "beb01041-711b-4988-89c3-9fe767665000",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 442,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6e6d87be-5c23-454f-99c4-619fa54466a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10627,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "7af1c4c0-0ae0-4305-a153-74a8aba43591",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f62e06c9-e7f6-4b4f-9d13-0a172ccef228",
              "21f30c99-674f-454d-ac01-b3196b255131",
              "1b9c9246-095a-4dfc-9956-e3ad8a4eada7",
              "beb01041-711b-4988-89c3-9fe767665000",
              "6e6d87be-5c23-454f-99c4-619fa54466a6",
              "7af1c4c0-0ae0-4305-a153-74a8aba43591"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12943,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7e7b8aee-ccdf-43d2-a26a-e2784f4a23d0",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 231,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "18b0132a-db16-4846-90ab-762078017815",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "45b203bd-811f-4819-85f5-f677471c4fb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9ff94a0f-ea9d-496c-a175-600314ea5329",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "18436b85-12e5-402d-8c6c-16010ad7593e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1476,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "5ae27002-445b-4a98-acca-c05597fbacb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 2369,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "68c47b6f-5c8f-4c7b-85b3-d40371e63c5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "45b203bd-811f-4819-85f5-f677471c4fb4",
              "9ff94a0f-ea9d-496c-a175-600314ea5329",
              "18436b85-12e5-402d-8c6c-16010ad7593e",
              "5ae27002-445b-4a98-acca-c05597fbacb7",
              "68c47b6f-5c8f-4c7b-85b3-d40371e63c5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4414,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "39e1e979-949d-45ef-85bc-396b5dd560ba",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 324,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "910a16bc-eefb-4846-ac06-6723d19eda35",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "8c7cfc31-248c-444c-8940-6a697682c5ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "ceba4d6c-3c04-4c98-94d3-571a9da38cef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 901,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "2e11ba1e-ff32-4c7c-8e8c-d3f50c762612",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5dbf4deb-43ce-406d-8b0f-2b799fea6195",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0dfdafc2-c89a-4abb-8cb6-3243cd17538c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9195794e-287c-4883-abce-bce0ddb23aea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "20c47057-1345-401a-9957-b3586fe7f4d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "20e4e1b8-7bd5-4975-bde3-6252a02ce7fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3d57012e-3ec4-4999-9990-5c18e6e75fda",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8c7cfc31-248c-444c-8940-6a697682c5ea",
              "ceba4d6c-3c04-4c98-94d3-571a9da38cef",
              "2e11ba1e-ff32-4c7c-8e8c-d3f50c762612",
              "5dbf4deb-43ce-406d-8b0f-2b799fea6195",
              "0dfdafc2-c89a-4abb-8cb6-3243cd17538c",
              "9195794e-287c-4883-abce-bce0ddb23aea",
              "20c47057-1345-401a-9957-b3586fe7f4d2",
              "20e4e1b8-7bd5-4975-bde3-6252a02ce7fe",
              "3d57012e-3ec4-4999-9990-5c18e6e75fda"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2316,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bb01970f-ca13-44f8-9901-c2b8e43c3c47",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 453,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a1b720aa-021d-46e9-b2a3-a46ac08b4c4b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 805,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "fef76742-af96-4e50-bb0c-1f58d01eb42d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 957,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b2bf4007-5120-4fc9-89c7-bde18ed7dfb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 1148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "365ab317-0f95-4535-aab0-f4918908ed2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 2423,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7827dd53-ba56-46c0-8b8c-d15b818ce476",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 1254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "10e2bf51-8573-4299-a4df-96a337b23f65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 2143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "053beea8-7b73-4803-bf93-d8c4382eaaa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 1233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "10d28d4f-4481-422f-885d-a92fa3bc8a4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 1283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d373250e-1d1a-4814-9725-2d7dc0232d58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 1289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5c2632f3-6c01-4f3b-bf32-070a0aae6da9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 1172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "731a9359-6595-4363-8c46-bf35ca3f9b73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "cad560ef-8966-442f-82a3-0370d4fa7683",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1958,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "63748ac9-9456-4d5c-adce-480df020a162",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1793,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "bb97a3da-ccd0-435e-ab2f-5d48e93dbb40",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fef76742-af96-4e50-bb0c-1f58d01eb42d",
              "b2bf4007-5120-4fc9-89c7-bde18ed7dfb8",
              "365ab317-0f95-4535-aab0-f4918908ed2a",
              "7827dd53-ba56-46c0-8b8c-d15b818ce476",
              "10e2bf51-8573-4299-a4df-96a337b23f65",
              "053beea8-7b73-4803-bf93-d8c4382eaaa4",
              "10d28d4f-4481-422f-885d-a92fa3bc8a4a",
              "d373250e-1d1a-4814-9725-2d7dc0232d58",
              "5c2632f3-6c01-4f3b-bf32-070a0aae6da9",
              "731a9359-6595-4363-8c46-bf35ca3f9b73",
              "cad560ef-8966-442f-82a3-0370d4fa7683",
              "63748ac9-9456-4d5c-adce-480df020a162",
              "bb97a3da-ccd0-435e-ab2f-5d48e93dbb40"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18835,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "be118307-71e1-4489-b143-11118f11a39d",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2389,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "769780fa-6f78-4b37-a88a-8aaf50c28c0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "769780fa-6f78-4b37-a88a-8aaf50c28c0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2389,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ee91f521-ad12-42af-aa36-083c63e3b081",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 153,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeKeysMock.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e586d8f3-8249-437e-8ad0-ed809041a110",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "81998292-c632-4716-bb97-7ced2f4df3d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "44ab1318-2acd-47b4-950e-7cc538a19856",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "b3415553-9410-4226-8dfb-29f9407e54af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "e153e8f5-239d-4f3d-a388-773670c9acb6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "5f42415a-3311-4357-8d07-4e20b0e04df6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 898,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const payoutKeyToAdd = accounts[0];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nconst votingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait finalize(votingId, true, {from: votingKey});\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await votingNew.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "46644d18-368d-44c8-b2e8-b7cec8ad7e77",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81998292-c632-4716-bb97-7ced2f4df3d5",
              "44ab1318-2acd-47b4-950e-7cc538a19856",
              "b3415553-9410-4226-8dfb-29f9407e54af",
              "e153e8f5-239d-4f3d-a388-773670c9acb6",
              "5f42415a-3311-4357-8d07-4e20b0e04df6",
              "46644d18-368d-44c8-b2e8-b7cec8ad7e77"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1417,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6dfb0a4f-20fd-490c-9f02-2db927629ec5",
        "title": "Contract: Voting to change keys upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
        "file": "/test/voting_to_change_keys_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 4069,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b1bab01f-8667-4c5c-bdcc-9f8821ca5e33",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "49d9ce8b-1887-4a43-8132-6e27ea249ffe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 830,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "fc715373-5245-4fed-9ba1-122d9b23eecc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "276b4323-dbaf-4ef9-99c7-602a00099b12",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "646d7a70-2573-495f-b85f-5c0f4d4ddef5",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 727,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "84d6e73e-b49e-4852-a1a4-8d4ffabfd8a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cbea0402-0e19-4631-ae0d-6975607430ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 454,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "06c72c86-5d7d-490f-ad56-5943e0008169",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 559,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "324ba06a-9dc4-4e55-96a2-daa891dfb7a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 424,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e6ed8bc6-1a4e-41cf-8f31-ba3d37255a22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10580,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "a1b9de85-5405-46f3-95e9-939e44a309d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84d6e73e-b49e-4852-a1a4-8d4ffabfd8a3",
              "cbea0402-0e19-4631-ae0d-6975607430ea",
              "06c72c86-5d7d-490f-ad56-5943e0008169",
              "324ba06a-9dc4-4e55-96a2-daa891dfb7a6",
              "e6ed8bc6-1a4e-41cf-8f31-ba3d37255a22",
              "a1b9de85-5405-46f3-95e9-939e44a309d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12914,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0423dfb7-267c-4bc5-a313-6560ddb1a3bb",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 214,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "819e03b1-e444-495c-8fb9-ed12cac0e76b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 296,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "85a1336e-c2d2-4a50-8822-7d2f56961a5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c2fb93fb-5ae5-4eae-85f2-74c706dd2f1c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 201,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "973e0fc3-049c-467a-805e-55ef5eae78b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1437,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "27ee1db9-b82f-42f4-90dc-6fe1d1840857",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 2405,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "81ffd7c0-10c7-4607-b0af-3b5ab3a4fd78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85a1336e-c2d2-4a50-8822-7d2f56961a5c",
              "c2fb93fb-5ae5-4eae-85f2-74c706dd2f1c",
              "973e0fc3-049c-467a-805e-55ef5eae78b4",
              "27ee1db9-b82f-42f4-90dc-6fe1d1840857",
              "81ffd7c0-10c7-4607-b0af-3b5ab3a4fd78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4368,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "86eab276-d7b8-42fe-8e9a-52017db26585",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 307,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "37666a10-a574-490c-997c-58b6596dfba7",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 284,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "1ef8fbed-6d89-41e9-91ce-5d182fbb4602",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "3d03ae36-a3c0-4269-a5f2-13316fb16481",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 874,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "a6e377ac-da9c-4461-8a6c-addb32a20b17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 61,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dd00eb1d-1819-4a50-b33a-77446275d02a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f593ed95-0168-4c30-8561-801732bd9b85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8b39eb54-5d01-4861-a350-64e3b5a76b96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 207,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "77535881-1e80-4579-9eb1-36c873df87a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ef5705b7-e369-490d-b1b6-0f8f0a397a1e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2c6337bf-29ff-4883-b8c3-7dafb3553ca7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1ef8fbed-6d89-41e9-91ce-5d182fbb4602",
              "3d03ae36-a3c0-4269-a5f2-13316fb16481",
              "a6e377ac-da9c-4461-8a6c-addb32a20b17",
              "dd00eb1d-1819-4a50-b33a-77446275d02a",
              "f593ed95-0168-4c30-8561-801732bd9b85",
              "8b39eb54-5d01-4861-a350-64e3b5a76b96",
              "77535881-1e80-4579-9eb1-36c873df87a6",
              "ef5705b7-e369-490d-b1b6-0f8f0a397a1e",
              "2c6337bf-29ff-4883-b8c3-7dafb3553ca7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2173,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e5d977e7-bbbe-45aa-a083-857b8ffc6ac5",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 550,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a39bb1f7-2f3b-4b03-b09e-675fd3b891fe",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 730,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6562173c-54b4-4dc2-b756-81a2bce8c557",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 1019,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "2d632437-a107-466f-ae18-883345cc57de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 1133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "20c7c715-6190-4f33-abe6-60f20fcb40dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 2358,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "176b4368-f187-43e6-8af3-11a3b2f5553f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 1113,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "bb6397ea-3665-4a7c-b809-741c24c9044c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 2173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "42b7ff1f-20d4-456d-85fb-0efb8a62ea53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 1189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ce9e1fbb-1216-44c1-88d1-256130751cfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 1231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "798a59b9-9e36-4c43-88ab-41961aeec3c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 1249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d626b845-6a39-4efa-9c1f-28fa2199138c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 1241,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ecdffb90-5483-41c8-b221-d6ee1ff1c693",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1624,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "dbc40055-d60f-478b-82bb-41fa4ded88c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1893,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "b4b7c13a-3ce7-4a81-99dd-b7e2f081c0d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1727,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "9a16501b-4c98-490e-9850-728af3aea435",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6562173c-54b4-4dc2-b756-81a2bce8c557",
              "2d632437-a107-466f-ae18-883345cc57de",
              "20c7c715-6190-4f33-abe6-60f20fcb40dd",
              "176b4368-f187-43e6-8af3-11a3b2f5553f",
              "bb6397ea-3665-4a7c-b809-741c24c9044c",
              "42b7ff1f-20d4-456d-85fb-0efb8a62ea53",
              "ce9e1fbb-1216-44c1-88d1-256130751cfd",
              "798a59b9-9e36-4c43-88ab-41961aeec3c0",
              "d626b845-6a39-4efa-9c1f-28fa2199138c",
              "ecdffb90-5483-41c8-b221-d6ee1ff1c693",
              "dbc40055-d60f-478b-82bb-41fa4ded88c9",
              "b4b7c13a-3ce7-4a81-99dd-b7e2f081c0d5",
              "9a16501b-4c98-490e-9850-728af3aea435"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 18680,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d58b240f-e522-4a7a-b56d-466d5be51cc8",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2051,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "09261092-78b0-4ddf-abbc-9608dc77350e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "09261092-78b0-4ddf-abbc-9608dc77350e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2051,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1a86af41-4029-442e-bd6c-50e26c6b9b96",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3754,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b012dc64-be57-434e-8484-5193cf6c63bb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9ec85501-0a06-4e8a-9973-165dc73c834d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1398,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "d5c90973-45ea-48e3-973d-1d0f79fb8aa5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b3ce9b75-f74b-4fd6-ab1d-06924ea925d7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b0ed57b6-0f5e-47b1-ae79-81a446917841",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "ce114cab-a8fb-4843-95c5-a1a2dc1c13d2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "d7f99fb7-4504-4896-9d74-d5909f8a4a97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2f9459a1-fd11-4572-bc41-cd6bd662bfd6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0b3bee23-1d11-4253-9dcf-8a73bad15671",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10505,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "eec3dfd5-ca63-4047-b959-73a29cc4c366",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7f99fb7-4504-4896-9d74-d5909f8a4a97",
              "2f9459a1-fd11-4572-bc41-cd6bd662bfd6",
              "0b3bee23-1d11-4253-9dcf-8a73bad15671",
              "eec3dfd5-ca63-4047-b959-73a29cc4c366"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10802,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6fe1dbac-5b30-448b-95b5-29c3dcecb9de",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 180,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "c391d3aa-3787-4748-9027-9f60697403f1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "d54cf821-469e-4ecf-8400-99b5985335a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "3e5e7bb2-716b-4af2-a36b-792406ecf4f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 447,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "61bcf530-0332-4bb9-9f0c-d42b6728abb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1c3fdb28-d0ce-4cca-9388-057b773ac702",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bcb35e2d-3ded-436e-8146-aee54764830b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "65ff8a24-4cbd-439f-ba70-3d3365b30991",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ce2ec1ef-cf3a-485e-b55f-fc7de5ed2469",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1b0eea96-22b9-4ecf-93a1-1788fb647a0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cd8027f1-f4bd-42f3-a35e-6415130cc97b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d54cf821-469e-4ecf-8400-99b5985335a8",
              "3e5e7bb2-716b-4af2-a36b-792406ecf4f4",
              "61bcf530-0332-4bb9-9f0c-d42b6728abb1",
              "1c3fdb28-d0ce-4cca-9388-057b773ac702",
              "bcb35e2d-3ded-436e-8146-aee54764830b",
              "65ff8a24-4cbd-439f-ba70-3d3365b30991",
              "ce2ec1ef-cf3a-485e-b55f-fc7de5ed2469",
              "1b0eea96-22b9-4ecf-93a1-1788fb647a0a",
              "cd8027f1-f4bd-42f3-a35e-6415130cc97b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1669,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1417aa4a-4144-4b42-af3f-8130786277e7",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "993106f5-1b3b-4e30-9c23-73d48b06a6e4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 597,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "01045d04-e90a-4305-a5a2-89acb4d4ee08",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1430,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "f25ada30-e370-4a9c-9411-857df99fea2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 2177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "5b385b76-673a-4f20-bbcd-a44c5d08d6f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 2547,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "152865df-2447-4fa0-8623-830639667c9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1568,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "080918cb-ef05-4a56-a1bf-beb5e55fa429",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "01045d04-e90a-4305-a5a2-89acb4d4ee08",
              "f25ada30-e370-4a9c-9411-857df99fea2a",
              "5b385b76-673a-4f20-bbcd-a44c5d08d6f8",
              "152865df-2447-4fa0-8623-830639667c9c",
              "080918cb-ef05-4a56-a1bf-beb5e55fa429"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8319,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2264067e-6caf-4f6d-821f-650f0e622bc3",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "02788bf2-a4e3-48a0-b3f0-d2613998657d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02788bf2-a4e3-48a0-b3f0-d2613998657d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1458,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e82f681f-2bf5-4b0d-9af1-39638d4bb7c9",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 146,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await Voting.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "363eeb8e-9935-4a19-89d1-a32572e8ab0d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "88e94ff2-1350-4274-804c-b15c24934e2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "e7f71813-d1cf-478e-afb6-825d665a2d2d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "332a0009-2a83-4439-92aa-993016409039",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "4db5bd53-c7ae-4355-b36f-faa73b4f7a30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "143df93d-a2b0-49d5-8df9-79e701faf4bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 433,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "8a10cd91-9949-4e23-a681-fe06ae12b615",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "88e94ff2-1350-4274-804c-b15c24934e2e",
              "e7f71813-d1cf-478e-afb6-825d665a2d2d",
              "332a0009-2a83-4439-92aa-993016409039",
              "4db5bd53-c7ae-4355-b36f-faa73b4f7a30",
              "143df93d-a2b0-49d5-8df9-79e701faf4bf",
              "8a10cd91-9949-4e23-a681-fe06ae12b615"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1044,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9bceba95-22bb-497b-8d9f-4c4b971ef450",
        "title": "Contract: VotingToChangeMinThreshold upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
        "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3351,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "ebd2b767-4d99-4b10-ad4f-ae53f4061adc",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5811cbe1-1187-4a11-8209-6512d0d4183b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1606,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst votingNew = await VotingNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingNew.at(votingEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "6e05ab00-0fab-49d0-bbfe-e2fbd00cab30",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "081a5038-8d74-4ab7-b2e9-6ba4f4886d13",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "06dc762b-b883-4795-92c9-483c5937e011",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 13,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "54016191-694b-4414-8f15-5ed88338c3ab",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "424fb1fd-9712-43f1-b405-f0e18d924c65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5175e456-7b9c-437e-aafe-1c8ed1546753",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "edb5b987-dc0f-42ce-a57b-18df65e8910e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10736,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "9acf0947-2c70-4186-bf7f-923f1cccbdf9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "424fb1fd-9712-43f1-b405-f0e18d924c65",
              "5175e456-7b9c-437e-aafe-1c8ed1546753",
              "edb5b987-dc0f-42ce-a57b-18df65e8910e",
              "9acf0947-2c70-4186-bf7f-923f1cccbdf9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11056,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7f9d0072-d639-4712-8678-b509f9ee2014",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 167,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "a3e74f47-7d84-4cc4-9ada-db50f9d4a56e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "368c4b19-7b02-489c-a278-194cb835ea5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "122743eb-4dbe-49c6-a152-138673682776",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 482,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "607e4a7b-d037-44e7-9674-3120c2541cf0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f0af5cfe-15b0-44e5-977a-f0b14ef9874f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2f8537be-9e53-41b9-be08-e70299f20a5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5292acd5-fa49-47c0-a215-0715a05c50ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d816e395-cf3a-4b8d-b1e1-2a9fe616fce7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6177c74c-1d2c-4043-aca0-0fc2f2c61b7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 201,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "160efc80-22c6-43c1-8633-2dd9af2e4f99",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "368c4b19-7b02-489c-a278-194cb835ea5f",
              "122743eb-4dbe-49c6-a152-138673682776",
              "607e4a7b-d037-44e7-9674-3120c2541cf0",
              "f0af5cfe-15b0-44e5-977a-f0b14ef9874f",
              "2f8537be-9e53-41b9-be08-e70299f20a5e",
              "5292acd5-fa49-47c0-a215-0715a05c50ce",
              "d816e395-cf3a-4b8d-b1e1-2a9fe616fce7",
              "6177c74c-1d2c-4043-aca0-0fc2f2c61b7d",
              "160efc80-22c6-43c1-8633-2dd9af2e4f99"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1764,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4bf0f823-1e09-41ab-ac06-6673df2cbed0",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "b7ccc7c3-2a0b-4085-b903-5900744ecbc8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 713,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "fd839290-6cc0-4dbc-9f54-6de0831edc85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1388,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "750b9854-fcf7-4b5b-8d6c-fc801691ed27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 2040,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "d1d18331-3b3c-4af8-9c6e-d84a7d71e176",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 2144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "50b7d957-d24d-4291-813a-ffb866b0b9b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1677,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "09304b47-86da-4236-9d7c-2b239bf0713c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd839290-6cc0-4dbc-9f54-6de0831edc85",
              "750b9854-fcf7-4b5b-8d6c-fc801691ed27",
              "d1d18331-3b3c-4af8-9c6e-d84a7d71e176",
              "50b7d957-d24d-4291-813a-ffb866b0b9b7",
              "09304b47-86da-4236-9d7c-2b239bf0713c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7962,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d568a329-d62f-47cf-84df-c8472a7dd855",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1544,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6df3f402-be06-4e43-86ca-d24aef30e648",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6df3f402-be06-4e43-86ca-d24aef30e648"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1544,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "72459240-bb05-4741-ad5e-6735d6a21a12",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2796,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "aed8bd7d-e7a4-4b5a-9857-b14a6fd10713",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7249bc45-41d4-4374-95cb-76995aa80d29",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1329,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "84f02ec4-e486-4f0b-bf26-d3b08913263f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4c9da3ed-b4fc-42c7-b108-4f70c721e2ea",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "3b4fb4ec-9a8d-4700-822d-30f603230825",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 176,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "64534755-0dfd-476c-86a8-df761d7b21bf",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "63a2ea1c-92fe-4e01-9568-36bd65d61e6e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "90e926df-c997-4936-b043-1bd634978dd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 404,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "d88274a6-2eae-4667-93f6-de2e84ad7380",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10549,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "386a4fb1-ebea-46db-886a-757bd56f89d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "63a2ea1c-92fe-4e01-9568-36bd65d61e6e",
              "90e926df-c997-4936-b043-1bd634978dd3",
              "d88274a6-2eae-4667-93f6-de2e84ad7380",
              "386a4fb1-ebea-46db-886a-757bd56f89d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11256,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "bf690a22-7554-4a2e-9d4b-0dd137101cc2",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 279,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "cc815b28-0bf8-4981-b22a-0e3d1449abd8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "7a66eb29-1360-43f9-8a6a-c1d43628faed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "d0b893e6-5c2c-4994-a80a-5d34e47a6341",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 966,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "7bdab4ab-0592-4213-af85-e4a68a39675f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "845aab9d-6c6a-4cd9-9ca5-84a9edf752af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e7ab7be1-99e2-43ea-9f43-415d8231afa5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3c52fe59-79b9-4bc9-8132-d4b333ca579a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5cd08540-719a-4dc1-ac44-8851d1cfc244",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f9a5a235-e266-42f6-bb7d-12fa2b51a172",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a76d8484-d74b-44ac-b56e-27ceb855eff7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7a66eb29-1360-43f9-8a6a-c1d43628faed",
              "d0b893e6-5c2c-4994-a80a-5d34e47a6341",
              "7bdab4ab-0592-4213-af85-e4a68a39675f",
              "845aab9d-6c6a-4cd9-9ca5-84a9edf752af",
              "e7ab7be1-99e2-43ea-9f43-415d8231afa5",
              "3c52fe59-79b9-4bc9-8132-d4b333ca579a",
              "5cd08540-719a-4dc1-ac44-8851d1cfc244",
              "f9a5a235-e266-42f6-bb7d-12fa2b51a172",
              "a76d8484-d74b-44ac-b56e-27ceb855eff7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "56122531-e052-42a1-aefc-31914494452b",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 480,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "d7fa6876-793f-4f88-805d-e2f09fe3c411",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 628,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "f8746eab-4c01-49fa-8790-e8ab60ae0a62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 1051,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "fff390ed-55cb-4102-8833-dcc6045c00c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 1178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "7f5e5d6b-98f4-415e-9f0f-68805d474846",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 1100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "6bc901d0-986f-41ba-bc6b-f9e0c5b93ed5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 1238,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "2c5a56e0-c19b-484e-9ff1-5498b38b1393",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 1140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "b9461e95-13ab-4a49-b39b-8dc0f2f72520",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 1111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "9764ec86-ea5d-4acc-aa0b-8d9a8d8429de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 1103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "0af04be9-46cf-405e-b0af-9a69264a8ca6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1557,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "af075010-3d62-471a-aab4-90148c04da33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1795,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "0d9ff1cb-74b6-4166-858c-9e60c7e5690b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f8746eab-4c01-49fa-8790-e8ab60ae0a62",
              "fff390ed-55cb-4102-8833-dcc6045c00c4",
              "7f5e5d6b-98f4-415e-9f0f-68805d474846",
              "6bc901d0-986f-41ba-bc6b-f9e0c5b93ed5",
              "2c5a56e0-c19b-484e-9ff1-5498b38b1393",
              "b9461e95-13ab-4a49-b39b-8dc0f2f72520",
              "9764ec86-ea5d-4acc-aa0b-8d9a8d8429de",
              "0af04be9-46cf-405e-b0af-9a69264a8ca6",
              "af075010-3d62-471a-aab4-90148c04da33",
              "0d9ff1cb-74b6-4166-858c-9e60c7e5690b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11901,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cdfb9162-fca6-453b-9279-eeffb42717bb",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ee412d3e-1a56-44de-8fde-c00df53f94e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee412d3e-1a56-44de-8fde-c00df53f94e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2219,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2f65ed94-1b1a-4ec2-bd0b-f0342d7db7b2",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 156,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeProxyAddress.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "9f79f8a7-cef2-4fa3-a2b6-db5a40625a66",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "92ca4b87-69a2-4c10-9c06-49bd800d5eaa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "3294634a-e75a-4644-acd6-a933499652cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "1bd211cf-0737-4740-917c-c6caf7dc64fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "ea06a64f-b833-443a-a990-71bd070a3894",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "8649ab62-f10d-4fac-ba7a-fbd34d178ea4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 628,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "57fb1a7c-14ee-4a6e-9003-1c977a2f7e31",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "92ca4b87-69a2-4c10-9c06-49bd800d5eaa",
              "3294634a-e75a-4644-acd6-a933499652cc",
              "1bd211cf-0737-4740-917c-c6caf7dc64fa",
              "ea06a64f-b833-443a-a990-71bd070a3894",
              "8649ab62-f10d-4fac-ba7a-fbd34d178ea4",
              "57fb1a7c-14ee-4a6e-9003-1c977a2f7e31"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1170,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1beb7235-17b4-44f5-8bf6-7eac6038f8e9",
        "title": "Contract: VotingToChangeProxyAddress upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
        "file": "/test/voting_to_change_proxy_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 4094,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "df21dc3c-a90f-4f21-8cf0-321982b50165",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "715f9060-d30c-4236-8b7a-44bf84e119ef",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1307,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nvotingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[7]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[7]}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "69f5cb4c-7b20-41cb-af0b-8da5c2842772",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f608e440-7e73-4088-b723-10661e7abaca",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "3d3b808f-18c0-4e59-bff2-731a9e1b1676",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 172,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "b8a6f8be-c978-414c-a65a-2829fd1a89a1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 428,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ffb97bae-8016-4469-8e05-5618ee71d26f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4d8aaca6-6f2d-4a9a-bea0-f02ddd6ce925",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 402,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "2f8bbd91-06fd-4e1f-bdec-b2dc090166f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 10436,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "3a22d568-5519-4c58-931f-e7798ba41283",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ffb97bae-8016-4469-8e05-5618ee71d26f",
              "4d8aaca6-6f2d-4a9a-bea0-f02ddd6ce925",
              "2f8bbd91-06fd-4e1f-bdec-b2dc090166f8",
              "3a22d568-5519-4c58-931f-e7798ba41283"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11285,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "db3183f9-f0f9-4b8d-9d6a-b4849b2b9186",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 290,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "30881366-3ae6-4a3c-8f67-fa7c366f2791",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "6d21a0e4-3b92-4306-9dbb-194c28dcb35e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 286,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "51ada057-66c7-48f4-8ca0-65852b0b538d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 884,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "1bc57f98-a5b4-473c-899d-b33bf7d4d9d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "18eab68a-befd-4b24-81de-d910245bdf77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "95165345-ec91-400f-a826-b1090b861896",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0e2b9114-ac15-4202-9b5d-1500b9693f45",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6234327a-bd18-4290-9af7-bea8d56f6908",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f74c8fd8-5960-47c4-9dd4-0d92cfea3150",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1ab5bd32-5a48-407a-ad2c-640d4ba5978b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6d21a0e4-3b92-4306-9dbb-194c28dcb35e",
              "51ada057-66c7-48f4-8ca0-65852b0b538d",
              "1bc57f98-a5b4-473c-899d-b33bf7d4d9d9",
              "18eab68a-befd-4b24-81de-d910245bdf77",
              "95165345-ec91-400f-a826-b1090b861896",
              "0e2b9114-ac15-4202-9b5d-1500b9693f45",
              "6234327a-bd18-4290-9af7-bea8d56f6908",
              "f74c8fd8-5960-47c4-9dd4-0d92cfea3150",
              "1ab5bd32-5a48-407a-ad2c-640d4ba5978b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2176,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f6903ebc-dede-4b80-abba-8ce7c74f9991",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 467,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "fe903b90-e1bd-4c1c-ace2-961b5c0dd9a0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 646,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "e512fe27-12dc-41de-8acd-24d6869934c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 953,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "73cc3259-5246-4921-92d8-a282b9509f5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 1104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d79f0006-7f44-441f-ad83-468b0a006a02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 1100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "91a87b45-8c0c-4a50-8d40-e95fa73e51a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 1187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "446c30ad-467a-4f96-9f5d-4eeea143b7b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 1178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "016354e9-6ade-4711-a886-4582eca1a4ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 1126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "c13bd353-9df7-4d3a-87b4-8e09be24aafd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 1008,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "bd730022-c0f1-4929-b4ca-58043284138f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1587,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "1fd224f7-51fa-411d-a87e-d2fa20c244e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1700,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "82cd9c5e-b68e-44ce-93b8-b6d820e56b4e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e512fe27-12dc-41de-8acd-24d6869934c0",
              "73cc3259-5246-4921-92d8-a282b9509f5e",
              "d79f0006-7f44-441f-ad83-468b0a006a02",
              "91a87b45-8c0c-4a50-8d40-e95fa73e51a4",
              "446c30ad-467a-4f96-9f5d-4eeea143b7b3",
              "016354e9-6ade-4711-a886-4582eca1a4ff",
              "c13bd353-9df7-4d3a-87b4-8e09be24aafd",
              "bd730022-c0f1-4929-b4ca-58043284138f",
              "1fd224f7-51fa-411d-a87e-d2fa20c244e4",
              "82cd9c5e-b68e-44ce-93b8-b6d820e56b4e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11589,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9c5747fe-7098-4659-b0c3-dd81fdd0894a",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 2163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0f13b531-7b0b-4ed2-b3be-bb446c62f74a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0f13b531-7b0b-4ed2-b3be-bb446c62f74a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2163,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "41d5abbf-9c79-47b0-9cd7-e85770f01339",
        "title": "Contract: VotingToManageEmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
        "file": "/test/voting_to_manage_emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3395,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "f2560067-a107-4d67-bd56-800eaa0845ef",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "edcb1a1c-d296-4bd6-924f-9b7cfc197b75",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 2353,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));",
            "err": {},
            "isRoot": false,
            "uuid": "7819f494-7da6-4cf9-a6db-a5e361180d60",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fa35b5b8-d0c4-4d68-b287-95649c1a30d4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "9a9a0588-0851-4411-bc09-a2626a1af7ef",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "4f1d3046-48fd-4b05-9db6-20b2c25a86d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "730c31c5-b0b1-433f-b92e-05930276d305",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f1d3046-48fd-4b05-9db6-20b2c25a86d1",
              "730c31c5-b0b1-433f-b92e-05930276d305"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 236,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ac1cdd8a-e43c-4f89-b5f1-d02cae04f781",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 300,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "775dace0-99c7-4c07-9d29-363a21ab6d7e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 952,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "89964da1-fbc0-4b25-9864-60622971bcec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b38d97b0-e774-40c4-b212-f5b2c34ba1d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "644bc77d-3b22-4b9a-9d7e-920ff9c7347d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4d523f6f-9aa2-46f2-8162-a5df1d5ec243",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "da660dc9-8bf2-4525-b2f2-d9e668dbc491",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b0980f76-9d29-48b6-a353-332167372ad8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "10d63d00-ae5f-4c55-8132-b5a4ba171d47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 506,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 100;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0554b466-4c31-4a4e-adc8-a6240a443c5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 487,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "74b33ef1-881c-4cf0-8872-d293634791d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "89964da1-fbc0-4b25-9864-60622971bcec",
              "b38d97b0-e774-40c4-b212-f5b2c34ba1d0",
              "644bc77d-3b22-4b9a-9d7e-920ff9c7347d",
              "4d523f6f-9aa2-46f2-8162-a5df1d5ec243",
              "da660dc9-8bf2-4525-b2f2-d9e668dbc491",
              "b0980f76-9d29-48b6-a353-332167372ad8",
              "10d63d00-ae5f-4c55-8132-b5a4ba171d47",
              "0554b466-4c31-4a4e-adc8-a6240a443c5e",
              "74b33ef1-881c-4cf0-8872-d293634791d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2340,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9ce6343a-4597-4257-a2ee-1dfb4b7b2ee2",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 307,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "c1c03084-445b-456d-b88c-4097b7497586",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 897,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b9269f81-bcfa-4746-904a-64042ebaf01b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 315,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0afbd0b4-0536-4f46-93c6-5677cd7c8e4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 286,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ac5a2fcd-4a6f-4e26-9635-36447ac7c87c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "015f4d48-625b-4400-a431-806a4d675ef3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 233,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "70e5223f-21bc-4801-b011-ec087d2cbfe5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 555,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e87f0e1f-a161-4510-acf1-7deef91f4fcc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b9269f81-bcfa-4746-904a-64042ebaf01b",
              "0afbd0b4-0536-4f46-93c6-5677cd7c8e4c",
              "ac5a2fcd-4a6f-4e26-9635-36447ac7c87c",
              "015f4d48-625b-4400-a431-806a4d675ef3",
              "70e5223f-21bc-4801-b011-ec087d2cbfe5",
              "e87f0e1f-a161-4510-acf1-7deef91f4fcc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2535,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2e6678b7-d218-4c57-9af1-00fa6c22e3b4",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "60392d5b-633f-448b-b8fd-bf40d923be16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "570dc7be-82a2-4b24-a307-3698ddfa0e97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d70c2503-ae65-4a6a-859e-4574994460f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "60392d5b-633f-448b-b8fd-bf40d923be16",
              "570dc7be-82a2-4b24-a307-3698ddfa0e97",
              "d70c2503-ae65-4a6a-859e-4574994460f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 319,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d9975774-c8d6-4d25-a6f2-dfd15113f457",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 414,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "caeb7ff1-0ce5-4765-8f30-3ea8eda029d2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 968,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nawait voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "494d339e-b3b0-4b27-a551-76cf4ed448ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1516,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE+3);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "a66d0716-887f-41b3-859f-8f048755c2b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f1da5495-69d8-444a-88ad-d88b640a8318",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "556bae37-255f-4b96-a3d5-091fb660e9ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 311,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "42da194b-7f7e-4a54-bc7a-d1ace36860ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f7d563b5-d323-48b4-a337-0fc7160c269a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4fd0aed9-47dd-487d-bdbd-6a70c76fadc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2d10afb7-023c-4bf3-a891-da47f0ccb59a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1508,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "da14d43d-9643-4aa9-9110-1289558bb8ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with old miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with old miningKey",
                "timedOut": false,
                "duration": 2442,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "799c44e9-4a73-4c84-b41c-f02321c34db4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "684e0a35-cf98-44db-85fe-4688a9671ebc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "494d339e-b3b0-4b27-a551-76cf4ed448ff",
              "a66d0716-887f-41b3-859f-8f048755c2b7",
              "f1da5495-69d8-444a-88ad-d88b640a8318",
              "556bae37-255f-4b96-a3d5-091fb660e9ff",
              "42da194b-7f7e-4a54-bc7a-d1ace36860ac",
              "f7d563b5-d323-48b4-a337-0fc7160c269a",
              "4fd0aed9-47dd-487d-bdbd-6a70c76fadc8",
              "2d10afb7-023c-4bf3-a891-da47f0ccb59a",
              "da14d43d-9643-4aa9-9110-1289558bb8ce",
              "799c44e9-4a73-4c84-b41c-f02321c34db4",
              "684e0a35-cf98-44db-85fe-4688a9671ebc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7643,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "860ddc61-81c6-442c-afcd-56205b314138",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 302,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "4a52cc12-3611-4df5-80e2-b03767e1812c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize happy path",
                "timedOut": false,
                "duration": 609,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "c8ae1379-ae05-405b-b922-b32e98d98fb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 1055,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "892694f0-7f38-415e-b82b-76d36473efd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1367,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "475e01de-0e78-4db4-95ac-f9068a75d450",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1815,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "f0ed7d4d-f961-47d2-9c46-cc854ed2b54f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2296,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "eb22f0f6-4948-4b20-9c8c-5a3a2f726c5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "0097087c-99ea-4dfd-b061-4d71555b02d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1737,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "9be5022c-f407-4d36-be23-e6fb49d3b35e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "395544f8-5560-42e6-a961-155abfb7aa28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 217,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f69148f3-0fe3-4a90-af86-837cadf60731",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "83d02a32-2c33-4af3-be40-94bf5ba0983f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 1315,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "d12ce1bd-954d-4dff-aff4-88ed4f4ab729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 305,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7f860ad6-98a5-4b61-b15d-cc3d764ba1ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8bc4c21a-52ac-4ab3-a172-778b6bae9c26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 743,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "bd4672a5-96f6-4baa-bff2-498c8e8d4249",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 315,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "46656477-a0cb-468f-8a92-2de7622e4b27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 295,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1074dceb-74a9-4ece-8cd7-7f571b5085a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8ae1379-ae05-405b-b922-b32e98d98fb3",
              "892694f0-7f38-415e-b82b-76d36473efd1",
              "475e01de-0e78-4db4-95ac-f9068a75d450",
              "f0ed7d4d-f961-47d2-9c46-cc854ed2b54f",
              "eb22f0f6-4948-4b20-9c8c-5a3a2f726c5e",
              "0097087c-99ea-4dfd-b061-4d71555b02d2",
              "9be5022c-f407-4d36-be23-e6fb49d3b35e",
              "395544f8-5560-42e6-a961-155abfb7aa28",
              "f69148f3-0fe3-4a90-af86-837cadf60731",
              "83d02a32-2c33-4af3-be40-94bf5ba0983f",
              "d12ce1bd-954d-4dff-aff4-88ed4f4ab729",
              "7f860ad6-98a5-4b61-b15d-cc3d764ba1ba",
              "8bc4c21a-52ac-4ab3-a172-778b6bae9c26",
              "bd4672a5-96f6-4baa-bff2-498c8e8d4249",
              "46656477-a0cb-468f-8a92-2de7622e4b27",
              "1074dceb-74a9-4ece-8cd7-7f571b5085a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15935,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "47812dbc-a1ed-46d9-9e63-ed70042733b0",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 146,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToManageEmissionFunds.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "769b52a8-230a-49fe-8093-98ff652b37db",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "bca90b84-b131-4283-b238-cf7ae7118f0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "8d9a95fa-12e7-4530-a73a-1a80d7d8ba0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "e9e20c10-2cc0-4f48-bca9-f1327aa49970",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 225,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "3bb4752a-c555-4474-9d7a-03b0bceb503d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "5bd396dd-a75f-4d0b-8e79-d487493c04bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 908,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst VOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nconst VOTING_END_DATE = moment.utc().add(7, 'days').unix();\nconst id = await voting.nextBallotId.call();\nconst receiver = accounts[9];\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  receiver // receiver\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await votingNew.noActiveBallotExists.call()).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "adb59bac-0577-44e4-8710-03d7fc045001",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bca90b84-b131-4283-b238-cf7ae7118f0a",
              "8d9a95fa-12e7-4530-a73a-1a80d7d8ba0f",
              "e9e20c10-2cc0-4f48-bca9-f1327aa49970",
              "3bb4752a-c555-4474-9d7a-03b0bceb503d",
              "5bd396dd-a75f-4d0b-8e79-d487493c04bf",
              "adb59bac-0577-44e4-8710-03d7fc045001"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1535,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "5238647f-6ec2-4571-b0e5-0fe79b717828",
        "title": "Contract: VotingToManageEmissionFunds upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
        "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 7154,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "2b35473e-e02a-431b-9694-9b44754e0895",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "db47d78d-d5fc-4a6e-a146-bb1bbdbb786b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 2502,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));\nconst votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nvoting = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "f5b76809-7294-4114-878a-18282d4b84bf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "416d9038-806d-4c17-b13b-f2f514d504ca",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "5fb11c40-6721-46a6-9083-0c43d680b24d",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "542508d9-3362-444e-ae9a-ae4359093fe0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fe77e671-ea08-4750-bfc0-1a40e46ebe9b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "542508d9-3362-444e-ae9a-ae4359093fe0",
              "fe77e671-ea08-4750-bfc0-1a40e46ebe9b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 129,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "13f23b43-6210-4dcd-a0c5-d2fa34563e54",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 288,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "5d1c1f7d-d2cc-46ad-bcba-aef09522b525",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 863,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "83d13b47-d6e3-4b83-b20a-7d32910bf98b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "87acbf24-f2ab-4c63-be43-0fcab15473b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8188c335-2265-423e-a931-6ce9c8737811",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "83fb1e35-3f8e-4b07-8610-ecc70f8a5e26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d5168e8a-19d4-4424-84d7-1a5cdbbf7653",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a6656f67-4a38-41cf-a1f8-0eb6269487cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "43524053-cb94-4eab-a9ae-b1afec1ab763",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 100;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a1424fad-b5da-4e23-a71e-98037c152b8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 494,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "688b3af0-1fab-48e8-8481-4f2b70c2ac65",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "83d13b47-d6e3-4b83-b20a-7d32910bf98b",
              "87acbf24-f2ab-4c63-be43-0fcab15473b5",
              "8188c335-2265-423e-a931-6ce9c8737811",
              "83fb1e35-3f8e-4b07-8610-ecc70f8a5e26",
              "d5168e8a-19d4-4424-84d7-1a5cdbbf7653",
              "a6656f67-4a38-41cf-a1f8-0eb6269487cd",
              "43524053-cb94-4eab-a9ae-b1afec1ab763",
              "a1424fad-b5da-4e23-a71e-98037c152b8a",
              "688b3af0-1fab-48e8-8481-4f2b70c2ac65"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2254,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a0fd555e-e359-43fc-b064-7821d3eefa49",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 334,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "2bdebbcb-3549-44ba-8952-36dec7b0be8d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 1051,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "abb4141a-27bc-44fc-9201-717013c6f267",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 334,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3973f164-e65c-4614-9d22-fe321e1eb6b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "bab08a65-ae41-42aa-b4cb-03d8e55c2221",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "10d48046-8c36-4ae1-8c0e-8f18f19dc29a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dff7352b-0914-4099-b8fc-288c590e2a33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 512,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "26f86ce8-e4cd-43e8-93ee-74c6d1f1b4b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "abb4141a-27bc-44fc-9201-717013c6f267",
              "3973f164-e65c-4614-9d22-fe321e1eb6b0",
              "bab08a65-ae41-42aa-b4cb-03d8e55c2221",
              "10d48046-8c36-4ae1-8c0e-8f18f19dc29a",
              "dff7352b-0914-4099-b8fc-288c590e2a33",
              "26f86ce8-e4cd-43e8-93ee-74c6d1f1b4b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2666,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f5d40225-536d-4b27-b041-83ccf85d3be0",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "06b56911-6895-42af-974c-d5236575f1b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "4257bbb8-2869-4b06-b43a-a367e69c22dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "6952db9a-b74d-45f6-8713-f9964ac30e5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06b56911-6895-42af-974c-d5236575f1b8",
              "4257bbb8-2869-4b06-b43a-a367e69c22dd",
              "6952db9a-b74d-45f6-8713-f9964ac30e5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 309,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e1bf2b3d-d441-426f-95b3-ec9fd820f702",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 512,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3d6c52f5-022f-470c-af7c-0dbf56587a3a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 978,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nawait voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "b4d6b721-0169-4ea7-bed9-71aa452f5d6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1484,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE+3);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "77cc44bd-a04a-4dcd-b7af-1a33b6bca5da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f91234c9-f2c5-4efc-9ec3-8f9c5c4088d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1886e2db-f017-4b83-ae19-7ee4f96b6a14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8c2e9182-e4f3-423c-a8fe-a51f03868294",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 226,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "32cd8c1e-716f-4d06-84d9-8e803e3b9dad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5082981c-3405-4870-9edc-c9ce45ffedc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dc739784-a709-46ad-a717-d93b05116116",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1566,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e502888e-f290-4904-b643-2e14046ced3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with old miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with old miningKey",
                "timedOut": false,
                "duration": 2511,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "940c6403-4bbb-4c5f-9413-3d7234658173",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4130e6fe-337e-456a-ad80-5ee761aa79d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4d6b721-0169-4ea7-bed9-71aa452f5d6c",
              "77cc44bd-a04a-4dcd-b7af-1a33b6bca5da",
              "f91234c9-f2c5-4efc-9ec3-8f9c5c4088d7",
              "1886e2db-f017-4b83-ae19-7ee4f96b6a14",
              "8c2e9182-e4f3-423c-a8fe-a51f03868294",
              "32cd8c1e-716f-4d06-84d9-8e803e3b9dad",
              "5082981c-3405-4870-9edc-c9ce45ffedc7",
              "dc739784-a709-46ad-a717-d93b05116116",
              "e502888e-f290-4904-b643-2e14046ced3d",
              "940c6403-4bbb-4c5f-9413-3d7234658173",
              "4130e6fe-337e-456a-ad80-5ee761aa79d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7641,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ee05bb97-07fe-48a1-939a-b6ec427bd1c4",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 295,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "13732eba-8b9b-432b-9946-1a1d9ae5be97",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 600,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "2bd8b013-594f-4f4b-9dda-d20e72580971",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 1112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "a1a981af-82b2-461a-9363-874d5d488de3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1326,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "81ca2e6d-615a-4f83-a6a5-58fbe2f4a315",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1745,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "6bf70274-a323-43b8-a747-bb0145352a57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 2175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a943c1d7-9b2d-404c-8ab5-4a9ec5b1c2d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1850,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "62be4474-b22a-4316-9089-a70ecbda9852",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1825,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "92ca1989-f6bf-42d1-9d61-ced903a35016",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 195,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a453fb3b-1aed-41cd-9b66-751b7c1005ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "eddc0b28-1082-4714-9b20-40cf7b7e1b32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "6393bbe7-5c11-4306-8ca8-8443c2b3fcea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 1282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "880eb48d-cbba-46cf-bb49-b9cbc0d7c583",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 290,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "efd59f17-5b24-4682-96ed-3de925d81ee9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "21cef979-dbc2-4a29-b140-62e54a5fa2a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 731,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9de882c4-6da2-4519-a021-ea1ebad99c61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 299,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(20, 'minutes').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c60eafb0-1a3b-4094-89cf-7348ebe5b529",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 291,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "111c64e6-74d2-4abd-a852-45bb206fcb6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2bd8b013-594f-4f4b-9dda-d20e72580971",
              "a1a981af-82b2-461a-9363-874d5d488de3",
              "81ca2e6d-615a-4f83-a6a5-58fbe2f4a315",
              "6bf70274-a323-43b8-a747-bb0145352a57",
              "a943c1d7-9b2d-404c-8ab5-4a9ec5b1c2d4",
              "62be4474-b22a-4316-9089-a70ecbda9852",
              "92ca1989-f6bf-42d1-9d61-ced903a35016",
              "a453fb3b-1aed-41cd-9b66-751b7c1005ae",
              "eddc0b28-1082-4714-9b20-40cf7b7e1b32",
              "6393bbe7-5c11-4306-8ca8-8443c2b3fcea",
              "880eb48d-cbba-46cf-bb49-b9cbc0d7c583",
              "efd59f17-5b24-4682-96ed-3de925d81ee9",
              "21cef979-dbc2-4a29-b140-62e54a5fa2a5",
              "9de882c4-6da2-4519-a021-ea1ebad99c61",
              "c60eafb0-1a3b-4094-89cf-7348ebe5b529",
              "111c64e6-74d2-4abd-a852-45bb206fcb6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15346,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}